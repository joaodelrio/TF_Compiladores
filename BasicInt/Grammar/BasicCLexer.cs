//------------------------------------------------------------------------------
// <auto-generated>
//     This code was generated by a tool.
//     ANTLR Version: 4.13.1
//
//     Changes to this file may cause incorrect behavior and will be lost if
//     the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------

// Generated from c:/Users/devma/Downloads/Projetos/Compilador TRABALHO FINAL/BasicC.g4 by ANTLR 4.13.1

// Unreachable code detected
#pragma warning disable 0162
// The variable '...' is assigned but its value is never used
#pragma warning disable 0219
// Missing XML comment for publicly visible type or member '...'
#pragma warning disable 1591
// Ambiguous reference in cref attribute
#pragma warning disable 419

namespace BasicInt.Grammar {
using System;
using System.IO;
using System.Text;
using Antlr4.Runtime;
using Antlr4.Runtime.Atn;
using Antlr4.Runtime.Misc;
using DFA = Antlr4.Runtime.Dfa.DFA;

[System.CodeDom.Compiler.GeneratedCode("ANTLR", "4.13.1")]
[System.CLSCompliant(false)]
public partial class BasicCLexer : Lexer {
	protected static DFA[] decisionToDFA;
	protected static PredictionContextCache sharedContextCache = new PredictionContextCache();
	public const int
		WHILE=1, RETURN=2, IMPORT=3, IF=4, ELSE=5, EOL=6, PRINT=7, READ=8, INTEGER=9, 
		DOUBLE=10, BOOLEAN=11, STRING=12, VOID=13, SUM=14, SUB=15, DIV=16, MULT=17, 
		MOD=18, ASSIGN=19, SEP=20, LP=21, RP=22, LB=23, RB=24, LE=25, LT=26, GT=27, 
		GE=28, EQ=29, NE=30, NUMD=31, BOOL=32, NUM=33, VAR=34, STR=35, COMMENT=36, 
		WS=37;
	public static string[] channelNames = {
		"DEFAULT_TOKEN_CHANNEL", "HIDDEN"
	};

	public static string[] modeNames = {
		"DEFAULT_MODE"
	};

	public static readonly string[] ruleNames = {
		"WHILE", "RETURN", "IMPORT", "IF", "ELSE", "EOL", "PRINT", "READ", "INTEGER", 
		"DOUBLE", "BOOLEAN", "STRING", "VOID", "SUM", "SUB", "DIV", "MULT", "MOD", 
		"ASSIGN", "SEP", "LP", "RP", "LB", "RB", "LE", "LT", "GT", "GE", "EQ", 
		"NE", "NUMD", "BOOL", "NUM", "VAR", "STR", "COMMENT", "WS"
	};


	public BasicCLexer(ICharStream input)
	: this(input, Console.Out, Console.Error) { }

	public BasicCLexer(ICharStream input, TextWriter output, TextWriter errorOutput)
	: base(input, output, errorOutput)
	{
		Interpreter = new LexerATNSimulator(this, _ATN, decisionToDFA, sharedContextCache);
	}

	private static readonly string[] _LiteralNames = {
		null, "'while'", "'return'", "'#import'", "'if'", "'else'", "';'", "'print'", 
		"'read'", "'int'", "'double'", "'bool'", "'str'", "'void'", "'+'", "'-'", 
		"'/'", "'*'", "'%'", "'='", "','", "'('", "')'", "'{'", "'}'", "'<='", 
		"'<'", "'>'", "'>='", "'=='", "'!='"
	};
	private static readonly string[] _SymbolicNames = {
		null, "WHILE", "RETURN", "IMPORT", "IF", "ELSE", "EOL", "PRINT", "READ", 
		"INTEGER", "DOUBLE", "BOOLEAN", "STRING", "VOID", "SUM", "SUB", "DIV", 
		"MULT", "MOD", "ASSIGN", "SEP", "LP", "RP", "LB", "RB", "LE", "LT", "GT", 
		"GE", "EQ", "NE", "NUMD", "BOOL", "NUM", "VAR", "STR", "COMMENT", "WS"
	};
	public static readonly IVocabulary DefaultVocabulary = new Vocabulary(_LiteralNames, _SymbolicNames);

	[NotNull]
	public override IVocabulary Vocabulary
	{
		get
		{
			return DefaultVocabulary;
		}
	}

	public override string GrammarFileName { get { return "BasicC.g4"; } }

	public override string[] RuleNames { get { return ruleNames; } }

	public override string[] ChannelNames { get { return channelNames; } }

	public override string[] ModeNames { get { return modeNames; } }

	public override int[] SerializedAtn { get { return _serializedATN; } }

	static BasicCLexer() {
		decisionToDFA = new DFA[_ATN.NumberOfDecisions];
		for (int i = 0; i < _ATN.NumberOfDecisions; i++) {
			decisionToDFA[i] = new DFA(_ATN.GetDecisionState(i), i);
		}
	}
	private static int[] _serializedATN = {
		4,0,37,239,6,-1,2,0,7,0,2,1,7,1,2,2,7,2,2,3,7,3,2,4,7,4,2,5,7,5,2,6,7,
		6,2,7,7,7,2,8,7,8,2,9,7,9,2,10,7,10,2,11,7,11,2,12,7,12,2,13,7,13,2,14,
		7,14,2,15,7,15,2,16,7,16,2,17,7,17,2,18,7,18,2,19,7,19,2,20,7,20,2,21,
		7,21,2,22,7,22,2,23,7,23,2,24,7,24,2,25,7,25,2,26,7,26,2,27,7,27,2,28,
		7,28,2,29,7,29,2,30,7,30,2,31,7,31,2,32,7,32,2,33,7,33,2,34,7,34,2,35,
		7,35,2,36,7,36,1,0,1,0,1,0,1,0,1,0,1,0,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,2,
		1,2,1,2,1,2,1,2,1,2,1,2,1,2,1,3,1,3,1,3,1,4,1,4,1,4,1,4,1,4,1,5,1,5,1,
		6,1,6,1,6,1,6,1,6,1,6,1,7,1,7,1,7,1,7,1,7,1,8,1,8,1,8,1,8,1,9,1,9,1,9,
		1,9,1,9,1,9,1,9,1,10,1,10,1,10,1,10,1,10,1,11,1,11,1,11,1,11,1,12,1,12,
		1,12,1,12,1,12,1,13,1,13,1,14,1,14,1,15,1,15,1,16,1,16,1,17,1,17,1,18,
		1,18,1,19,1,19,1,20,1,20,1,21,1,21,1,22,1,22,1,23,1,23,1,24,1,24,1,24,
		1,25,1,25,1,26,1,26,1,27,1,27,1,27,1,28,1,28,1,28,1,29,1,29,1,29,1,30,
		4,30,182,8,30,11,30,12,30,183,1,30,1,30,4,30,188,8,30,11,30,12,30,189,
		1,31,1,31,1,31,1,31,1,31,1,31,1,31,1,31,1,31,3,31,201,8,31,1,32,4,32,204,
		8,32,11,32,12,32,205,1,33,4,33,209,8,33,11,33,12,33,210,1,34,1,34,5,34,
		215,8,34,10,34,12,34,218,9,34,1,34,1,34,1,35,1,35,1,35,1,35,5,35,226,8,
		35,10,35,12,35,229,9,35,1,35,1,35,1,36,4,36,234,8,36,11,36,12,36,235,1,
		36,1,36,0,0,37,1,1,3,2,5,3,7,4,9,5,11,6,13,7,15,8,17,9,19,10,21,11,23,
		12,25,13,27,14,29,15,31,16,33,17,35,18,37,19,39,20,41,21,43,22,45,23,47,
		24,49,25,51,26,53,27,55,28,57,29,59,30,61,31,63,32,65,33,67,34,69,35,71,
		36,73,37,1,0,5,1,0,48,57,2,0,65,90,97,122,2,0,10,10,34,34,2,0,10,10,13,
		13,3,0,9,10,13,13,32,32,246,0,1,1,0,0,0,0,3,1,0,0,0,0,5,1,0,0,0,0,7,1,
		0,0,0,0,9,1,0,0,0,0,11,1,0,0,0,0,13,1,0,0,0,0,15,1,0,0,0,0,17,1,0,0,0,
		0,19,1,0,0,0,0,21,1,0,0,0,0,23,1,0,0,0,0,25,1,0,0,0,0,27,1,0,0,0,0,29,
		1,0,0,0,0,31,1,0,0,0,0,33,1,0,0,0,0,35,1,0,0,0,0,37,1,0,0,0,0,39,1,0,0,
		0,0,41,1,0,0,0,0,43,1,0,0,0,0,45,1,0,0,0,0,47,1,0,0,0,0,49,1,0,0,0,0,51,
		1,0,0,0,0,53,1,0,0,0,0,55,1,0,0,0,0,57,1,0,0,0,0,59,1,0,0,0,0,61,1,0,0,
		0,0,63,1,0,0,0,0,65,1,0,0,0,0,67,1,0,0,0,0,69,1,0,0,0,0,71,1,0,0,0,0,73,
		1,0,0,0,1,75,1,0,0,0,3,81,1,0,0,0,5,88,1,0,0,0,7,96,1,0,0,0,9,99,1,0,0,
		0,11,104,1,0,0,0,13,106,1,0,0,0,15,112,1,0,0,0,17,117,1,0,0,0,19,121,1,
		0,0,0,21,128,1,0,0,0,23,133,1,0,0,0,25,137,1,0,0,0,27,142,1,0,0,0,29,144,
		1,0,0,0,31,146,1,0,0,0,33,148,1,0,0,0,35,150,1,0,0,0,37,152,1,0,0,0,39,
		154,1,0,0,0,41,156,1,0,0,0,43,158,1,0,0,0,45,160,1,0,0,0,47,162,1,0,0,
		0,49,164,1,0,0,0,51,167,1,0,0,0,53,169,1,0,0,0,55,171,1,0,0,0,57,174,1,
		0,0,0,59,177,1,0,0,0,61,181,1,0,0,0,63,200,1,0,0,0,65,203,1,0,0,0,67,208,
		1,0,0,0,69,212,1,0,0,0,71,221,1,0,0,0,73,233,1,0,0,0,75,76,5,119,0,0,76,
		77,5,104,0,0,77,78,5,105,0,0,78,79,5,108,0,0,79,80,5,101,0,0,80,2,1,0,
		0,0,81,82,5,114,0,0,82,83,5,101,0,0,83,84,5,116,0,0,84,85,5,117,0,0,85,
		86,5,114,0,0,86,87,5,110,0,0,87,4,1,0,0,0,88,89,5,35,0,0,89,90,5,105,0,
		0,90,91,5,109,0,0,91,92,5,112,0,0,92,93,5,111,0,0,93,94,5,114,0,0,94,95,
		5,116,0,0,95,6,1,0,0,0,96,97,5,105,0,0,97,98,5,102,0,0,98,8,1,0,0,0,99,
		100,5,101,0,0,100,101,5,108,0,0,101,102,5,115,0,0,102,103,5,101,0,0,103,
		10,1,0,0,0,104,105,5,59,0,0,105,12,1,0,0,0,106,107,5,112,0,0,107,108,5,
		114,0,0,108,109,5,105,0,0,109,110,5,110,0,0,110,111,5,116,0,0,111,14,1,
		0,0,0,112,113,5,114,0,0,113,114,5,101,0,0,114,115,5,97,0,0,115,116,5,100,
		0,0,116,16,1,0,0,0,117,118,5,105,0,0,118,119,5,110,0,0,119,120,5,116,0,
		0,120,18,1,0,0,0,121,122,5,100,0,0,122,123,5,111,0,0,123,124,5,117,0,0,
		124,125,5,98,0,0,125,126,5,108,0,0,126,127,5,101,0,0,127,20,1,0,0,0,128,
		129,5,98,0,0,129,130,5,111,0,0,130,131,5,111,0,0,131,132,5,108,0,0,132,
		22,1,0,0,0,133,134,5,115,0,0,134,135,5,116,0,0,135,136,5,114,0,0,136,24,
		1,0,0,0,137,138,5,118,0,0,138,139,5,111,0,0,139,140,5,105,0,0,140,141,
		5,100,0,0,141,26,1,0,0,0,142,143,5,43,0,0,143,28,1,0,0,0,144,145,5,45,
		0,0,145,30,1,0,0,0,146,147,5,47,0,0,147,32,1,0,0,0,148,149,5,42,0,0,149,
		34,1,0,0,0,150,151,5,37,0,0,151,36,1,0,0,0,152,153,5,61,0,0,153,38,1,0,
		0,0,154,155,5,44,0,0,155,40,1,0,0,0,156,157,5,40,0,0,157,42,1,0,0,0,158,
		159,5,41,0,0,159,44,1,0,0,0,160,161,5,123,0,0,161,46,1,0,0,0,162,163,5,
		125,0,0,163,48,1,0,0,0,164,165,5,60,0,0,165,166,5,61,0,0,166,50,1,0,0,
		0,167,168,5,60,0,0,168,52,1,0,0,0,169,170,5,62,0,0,170,54,1,0,0,0,171,
		172,5,62,0,0,172,173,5,61,0,0,173,56,1,0,0,0,174,175,5,61,0,0,175,176,
		5,61,0,0,176,58,1,0,0,0,177,178,5,33,0,0,178,179,5,61,0,0,179,60,1,0,0,
		0,180,182,7,0,0,0,181,180,1,0,0,0,182,183,1,0,0,0,183,181,1,0,0,0,183,
		184,1,0,0,0,184,185,1,0,0,0,185,187,5,46,0,0,186,188,7,0,0,0,187,186,1,
		0,0,0,188,189,1,0,0,0,189,187,1,0,0,0,189,190,1,0,0,0,190,62,1,0,0,0,191,
		192,5,116,0,0,192,193,5,114,0,0,193,194,5,117,0,0,194,201,5,101,0,0,195,
		196,5,102,0,0,196,197,5,97,0,0,197,198,5,108,0,0,198,199,5,115,0,0,199,
		201,5,101,0,0,200,191,1,0,0,0,200,195,1,0,0,0,201,64,1,0,0,0,202,204,7,
		0,0,0,203,202,1,0,0,0,204,205,1,0,0,0,205,203,1,0,0,0,205,206,1,0,0,0,
		206,66,1,0,0,0,207,209,7,1,0,0,208,207,1,0,0,0,209,210,1,0,0,0,210,208,
		1,0,0,0,210,211,1,0,0,0,211,68,1,0,0,0,212,216,5,34,0,0,213,215,8,2,0,
		0,214,213,1,0,0,0,215,218,1,0,0,0,216,214,1,0,0,0,216,217,1,0,0,0,217,
		219,1,0,0,0,218,216,1,0,0,0,219,220,5,34,0,0,220,70,1,0,0,0,221,222,5,
		47,0,0,222,223,5,47,0,0,223,227,1,0,0,0,224,226,8,3,0,0,225,224,1,0,0,
		0,226,229,1,0,0,0,227,225,1,0,0,0,227,228,1,0,0,0,228,230,1,0,0,0,229,
		227,1,0,0,0,230,231,6,35,0,0,231,72,1,0,0,0,232,234,7,4,0,0,233,232,1,
		0,0,0,234,235,1,0,0,0,235,233,1,0,0,0,235,236,1,0,0,0,236,237,1,0,0,0,
		237,238,6,36,0,0,238,74,1,0,0,0,9,0,183,189,200,205,210,216,227,235,1,
		6,0,0
	};

	public static readonly ATN _ATN =
		new ATNDeserializer().Deserialize(_serializedATN);


}
} // namespace BasicInt.Grammar
