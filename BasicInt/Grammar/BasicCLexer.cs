//------------------------------------------------------------------------------
// <auto-generated>
//     This code was generated by a tool.
//     ANTLR Version: 4.13.1
//
//     Changes to this file may cause incorrect behavior and will be lost if
//     the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------

// Generated from c:/Users/devma/Downloads/Projetos/Compilador TRABALHO FINAL/BasicC.g4 by ANTLR 4.13.1

// Unreachable code detected
#pragma warning disable 0162
// The variable '...' is assigned but its value is never used
#pragma warning disable 0219
// Missing XML comment for publicly visible type or member '...'
#pragma warning disable 1591
// Ambiguous reference in cref attribute
#pragma warning disable 419

namespace BasicInt.Grammar {
using System;
using System.IO;
using System.Text;
using Antlr4.Runtime;
using Antlr4.Runtime.Atn;
using Antlr4.Runtime.Misc;
using DFA = Antlr4.Runtime.Dfa.DFA;

[System.CodeDom.Compiler.GeneratedCode("ANTLR", "4.13.1")]
[System.CLSCompliant(false)]
public partial class BasicCLexer : Lexer {
	protected static DFA[] decisionToDFA;
	protected static PredictionContextCache sharedContextCache = new PredictionContextCache();
	public const int
		T__0=1, T__1=2, WHILE=3, RETURN=4, IMPORT=5, TYPEOF=6, IF=7, ELSE=8, EOL=9, 
		PRINT=10, READ=11, INTEGER=12, DOUBLE=13, BOOLEAN=14, STRING=15, VOID=16, 
		SUM=17, SUB=18, DIV=19, MULT=20, MOD=21, ASSIGN=22, SEP=23, LP=24, RP=25, 
		LB=26, RB=27, LE=28, LT=29, GT=30, GE=31, EQ=32, NE=33, NUMD=34, BOOL=35, 
		NUM=36, VAR=37, STR=38, COMMENT=39, WS=40;
	public static string[] channelNames = {
		"DEFAULT_TOKEN_CHANNEL", "HIDDEN"
	};

	public static string[] modeNames = {
		"DEFAULT_MODE"
	};

	public static readonly string[] ruleNames = {
		"T__0", "T__1", "WHILE", "RETURN", "IMPORT", "TYPEOF", "IF", "ELSE", "EOL", 
		"PRINT", "READ", "INTEGER", "DOUBLE", "BOOLEAN", "STRING", "VOID", "SUM", 
		"SUB", "DIV", "MULT", "MOD", "ASSIGN", "SEP", "LP", "RP", "LB", "RB", 
		"LE", "LT", "GT", "GE", "EQ", "NE", "NUMD", "BOOL", "NUM", "VAR", "STR", 
		"COMMENT", "WS"
	};


	public BasicCLexer(ICharStream input)
	: this(input, Console.Out, Console.Error) { }

	public BasicCLexer(ICharStream input, TextWriter output, TextWriter errorOutput)
	: base(input, output, errorOutput)
	{
		Interpreter = new LexerATNSimulator(this, _ATN, decisionToDFA, sharedContextCache);
	}

	private static readonly string[] _LiteralNames = {
		null, "'?'", "':'", "'while'", "'return'", "'#import'", "'typeof'", "'if'", 
		"'else'", "';'", "'print'", "'read'", "'int'", "'double'", "'bool'", "'str'", 
		"'void'", "'+'", "'-'", "'/'", "'*'", "'%'", "'='", "','", "'('", "')'", 
		"'{'", "'}'", "'<='", "'<'", "'>'", "'>='", "'=='", "'!='"
	};
	private static readonly string[] _SymbolicNames = {
		null, null, null, "WHILE", "RETURN", "IMPORT", "TYPEOF", "IF", "ELSE", 
		"EOL", "PRINT", "READ", "INTEGER", "DOUBLE", "BOOLEAN", "STRING", "VOID", 
		"SUM", "SUB", "DIV", "MULT", "MOD", "ASSIGN", "SEP", "LP", "RP", "LB", 
		"RB", "LE", "LT", "GT", "GE", "EQ", "NE", "NUMD", "BOOL", "NUM", "VAR", 
		"STR", "COMMENT", "WS"
	};
	public static readonly IVocabulary DefaultVocabulary = new Vocabulary(_LiteralNames, _SymbolicNames);

	[NotNull]
	public override IVocabulary Vocabulary
	{
		get
		{
			return DefaultVocabulary;
		}
	}

	public override string GrammarFileName { get { return "BasicC.g4"; } }

	public override string[] RuleNames { get { return ruleNames; } }

	public override string[] ChannelNames { get { return channelNames; } }

	public override string[] ModeNames { get { return modeNames; } }

	public override int[] SerializedAtn { get { return _serializedATN; } }

	static BasicCLexer() {
		decisionToDFA = new DFA[_ATN.NumberOfDecisions];
		for (int i = 0; i < _ATN.NumberOfDecisions; i++) {
			decisionToDFA[i] = new DFA(_ATN.GetDecisionState(i), i);
		}
	}
	private static int[] _serializedATN = {
		4,0,40,256,6,-1,2,0,7,0,2,1,7,1,2,2,7,2,2,3,7,3,2,4,7,4,2,5,7,5,2,6,7,
		6,2,7,7,7,2,8,7,8,2,9,7,9,2,10,7,10,2,11,7,11,2,12,7,12,2,13,7,13,2,14,
		7,14,2,15,7,15,2,16,7,16,2,17,7,17,2,18,7,18,2,19,7,19,2,20,7,20,2,21,
		7,21,2,22,7,22,2,23,7,23,2,24,7,24,2,25,7,25,2,26,7,26,2,27,7,27,2,28,
		7,28,2,29,7,29,2,30,7,30,2,31,7,31,2,32,7,32,2,33,7,33,2,34,7,34,2,35,
		7,35,2,36,7,36,2,37,7,37,2,38,7,38,2,39,7,39,1,0,1,0,1,1,1,1,1,2,1,2,1,
		2,1,2,1,2,1,2,1,3,1,3,1,3,1,3,1,3,1,3,1,3,1,4,1,4,1,4,1,4,1,4,1,4,1,4,
		1,4,1,5,1,5,1,5,1,5,1,5,1,5,1,5,1,6,1,6,1,6,1,7,1,7,1,7,1,7,1,7,1,8,1,
		8,1,9,1,9,1,9,1,9,1,9,1,9,1,10,1,10,1,10,1,10,1,10,1,11,1,11,1,11,1,11,
		1,12,1,12,1,12,1,12,1,12,1,12,1,12,1,13,1,13,1,13,1,13,1,13,1,14,1,14,
		1,14,1,14,1,15,1,15,1,15,1,15,1,15,1,16,1,16,1,17,1,17,1,18,1,18,1,19,
		1,19,1,20,1,20,1,21,1,21,1,22,1,22,1,23,1,23,1,24,1,24,1,25,1,25,1,26,
		1,26,1,27,1,27,1,27,1,28,1,28,1,29,1,29,1,30,1,30,1,30,1,31,1,31,1,31,
		1,32,1,32,1,32,1,33,4,33,199,8,33,11,33,12,33,200,1,33,1,33,4,33,205,8,
		33,11,33,12,33,206,1,34,1,34,1,34,1,34,1,34,1,34,1,34,1,34,1,34,3,34,218,
		8,34,1,35,4,35,221,8,35,11,35,12,35,222,1,36,4,36,226,8,36,11,36,12,36,
		227,1,37,1,37,5,37,232,8,37,10,37,12,37,235,9,37,1,37,1,37,1,38,1,38,1,
		38,1,38,5,38,243,8,38,10,38,12,38,246,9,38,1,38,1,38,1,39,4,39,251,8,39,
		11,39,12,39,252,1,39,1,39,0,0,40,1,1,3,2,5,3,7,4,9,5,11,6,13,7,15,8,17,
		9,19,10,21,11,23,12,25,13,27,14,29,15,31,16,33,17,35,18,37,19,39,20,41,
		21,43,22,45,23,47,24,49,25,51,26,53,27,55,28,57,29,59,30,61,31,63,32,65,
		33,67,34,69,35,71,36,73,37,75,38,77,39,79,40,1,0,5,1,0,48,57,2,0,65,90,
		97,122,2,0,10,10,34,34,2,0,10,10,13,13,3,0,9,10,13,13,32,32,263,0,1,1,
		0,0,0,0,3,1,0,0,0,0,5,1,0,0,0,0,7,1,0,0,0,0,9,1,0,0,0,0,11,1,0,0,0,0,13,
		1,0,0,0,0,15,1,0,0,0,0,17,1,0,0,0,0,19,1,0,0,0,0,21,1,0,0,0,0,23,1,0,0,
		0,0,25,1,0,0,0,0,27,1,0,0,0,0,29,1,0,0,0,0,31,1,0,0,0,0,33,1,0,0,0,0,35,
		1,0,0,0,0,37,1,0,0,0,0,39,1,0,0,0,0,41,1,0,0,0,0,43,1,0,0,0,0,45,1,0,0,
		0,0,47,1,0,0,0,0,49,1,0,0,0,0,51,1,0,0,0,0,53,1,0,0,0,0,55,1,0,0,0,0,57,
		1,0,0,0,0,59,1,0,0,0,0,61,1,0,0,0,0,63,1,0,0,0,0,65,1,0,0,0,0,67,1,0,0,
		0,0,69,1,0,0,0,0,71,1,0,0,0,0,73,1,0,0,0,0,75,1,0,0,0,0,77,1,0,0,0,0,79,
		1,0,0,0,1,81,1,0,0,0,3,83,1,0,0,0,5,85,1,0,0,0,7,91,1,0,0,0,9,98,1,0,0,
		0,11,106,1,0,0,0,13,113,1,0,0,0,15,116,1,0,0,0,17,121,1,0,0,0,19,123,1,
		0,0,0,21,129,1,0,0,0,23,134,1,0,0,0,25,138,1,0,0,0,27,145,1,0,0,0,29,150,
		1,0,0,0,31,154,1,0,0,0,33,159,1,0,0,0,35,161,1,0,0,0,37,163,1,0,0,0,39,
		165,1,0,0,0,41,167,1,0,0,0,43,169,1,0,0,0,45,171,1,0,0,0,47,173,1,0,0,
		0,49,175,1,0,0,0,51,177,1,0,0,0,53,179,1,0,0,0,55,181,1,0,0,0,57,184,1,
		0,0,0,59,186,1,0,0,0,61,188,1,0,0,0,63,191,1,0,0,0,65,194,1,0,0,0,67,198,
		1,0,0,0,69,217,1,0,0,0,71,220,1,0,0,0,73,225,1,0,0,0,75,229,1,0,0,0,77,
		238,1,0,0,0,79,250,1,0,0,0,81,82,5,63,0,0,82,2,1,0,0,0,83,84,5,58,0,0,
		84,4,1,0,0,0,85,86,5,119,0,0,86,87,5,104,0,0,87,88,5,105,0,0,88,89,5,108,
		0,0,89,90,5,101,0,0,90,6,1,0,0,0,91,92,5,114,0,0,92,93,5,101,0,0,93,94,
		5,116,0,0,94,95,5,117,0,0,95,96,5,114,0,0,96,97,5,110,0,0,97,8,1,0,0,0,
		98,99,5,35,0,0,99,100,5,105,0,0,100,101,5,109,0,0,101,102,5,112,0,0,102,
		103,5,111,0,0,103,104,5,114,0,0,104,105,5,116,0,0,105,10,1,0,0,0,106,107,
		5,116,0,0,107,108,5,121,0,0,108,109,5,112,0,0,109,110,5,101,0,0,110,111,
		5,111,0,0,111,112,5,102,0,0,112,12,1,0,0,0,113,114,5,105,0,0,114,115,5,
		102,0,0,115,14,1,0,0,0,116,117,5,101,0,0,117,118,5,108,0,0,118,119,5,115,
		0,0,119,120,5,101,0,0,120,16,1,0,0,0,121,122,5,59,0,0,122,18,1,0,0,0,123,
		124,5,112,0,0,124,125,5,114,0,0,125,126,5,105,0,0,126,127,5,110,0,0,127,
		128,5,116,0,0,128,20,1,0,0,0,129,130,5,114,0,0,130,131,5,101,0,0,131,132,
		5,97,0,0,132,133,5,100,0,0,133,22,1,0,0,0,134,135,5,105,0,0,135,136,5,
		110,0,0,136,137,5,116,0,0,137,24,1,0,0,0,138,139,5,100,0,0,139,140,5,111,
		0,0,140,141,5,117,0,0,141,142,5,98,0,0,142,143,5,108,0,0,143,144,5,101,
		0,0,144,26,1,0,0,0,145,146,5,98,0,0,146,147,5,111,0,0,147,148,5,111,0,
		0,148,149,5,108,0,0,149,28,1,0,0,0,150,151,5,115,0,0,151,152,5,116,0,0,
		152,153,5,114,0,0,153,30,1,0,0,0,154,155,5,118,0,0,155,156,5,111,0,0,156,
		157,5,105,0,0,157,158,5,100,0,0,158,32,1,0,0,0,159,160,5,43,0,0,160,34,
		1,0,0,0,161,162,5,45,0,0,162,36,1,0,0,0,163,164,5,47,0,0,164,38,1,0,0,
		0,165,166,5,42,0,0,166,40,1,0,0,0,167,168,5,37,0,0,168,42,1,0,0,0,169,
		170,5,61,0,0,170,44,1,0,0,0,171,172,5,44,0,0,172,46,1,0,0,0,173,174,5,
		40,0,0,174,48,1,0,0,0,175,176,5,41,0,0,176,50,1,0,0,0,177,178,5,123,0,
		0,178,52,1,0,0,0,179,180,5,125,0,0,180,54,1,0,0,0,181,182,5,60,0,0,182,
		183,5,61,0,0,183,56,1,0,0,0,184,185,5,60,0,0,185,58,1,0,0,0,186,187,5,
		62,0,0,187,60,1,0,0,0,188,189,5,62,0,0,189,190,5,61,0,0,190,62,1,0,0,0,
		191,192,5,61,0,0,192,193,5,61,0,0,193,64,1,0,0,0,194,195,5,33,0,0,195,
		196,5,61,0,0,196,66,1,0,0,0,197,199,7,0,0,0,198,197,1,0,0,0,199,200,1,
		0,0,0,200,198,1,0,0,0,200,201,1,0,0,0,201,202,1,0,0,0,202,204,5,46,0,0,
		203,205,7,0,0,0,204,203,1,0,0,0,205,206,1,0,0,0,206,204,1,0,0,0,206,207,
		1,0,0,0,207,68,1,0,0,0,208,209,5,116,0,0,209,210,5,114,0,0,210,211,5,117,
		0,0,211,218,5,101,0,0,212,213,5,102,0,0,213,214,5,97,0,0,214,215,5,108,
		0,0,215,216,5,115,0,0,216,218,5,101,0,0,217,208,1,0,0,0,217,212,1,0,0,
		0,218,70,1,0,0,0,219,221,7,0,0,0,220,219,1,0,0,0,221,222,1,0,0,0,222,220,
		1,0,0,0,222,223,1,0,0,0,223,72,1,0,0,0,224,226,7,1,0,0,225,224,1,0,0,0,
		226,227,1,0,0,0,227,225,1,0,0,0,227,228,1,0,0,0,228,74,1,0,0,0,229,233,
		5,34,0,0,230,232,8,2,0,0,231,230,1,0,0,0,232,235,1,0,0,0,233,231,1,0,0,
		0,233,234,1,0,0,0,234,236,1,0,0,0,235,233,1,0,0,0,236,237,5,34,0,0,237,
		76,1,0,0,0,238,239,5,47,0,0,239,240,5,47,0,0,240,244,1,0,0,0,241,243,8,
		3,0,0,242,241,1,0,0,0,243,246,1,0,0,0,244,242,1,0,0,0,244,245,1,0,0,0,
		245,247,1,0,0,0,246,244,1,0,0,0,247,248,6,38,0,0,248,78,1,0,0,0,249,251,
		7,4,0,0,250,249,1,0,0,0,251,252,1,0,0,0,252,250,1,0,0,0,252,253,1,0,0,
		0,253,254,1,0,0,0,254,255,6,39,0,0,255,80,1,0,0,0,9,0,200,206,217,222,
		227,233,244,252,1,6,0,0
	};

	public static readonly ATN _ATN =
		new ATNDeserializer().Deserialize(_serializedATN);


}
} // namespace BasicInt.Grammar
