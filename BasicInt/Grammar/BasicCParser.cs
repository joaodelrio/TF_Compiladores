//------------------------------------------------------------------------------
// <auto-generated>
//     This code was generated by a tool.
//     ANTLR Version: 4.13.1
//
//     Changes to this file may cause incorrect behavior and will be lost if
//     the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------

// Generated from c:/Users/devma/Downloads/Projetos/Compilador TRABALHO FINAL/BasicC.g4 by ANTLR 4.13.1

// Unreachable code detected
#pragma warning disable 0162
// The variable '...' is assigned but its value is never used
#pragma warning disable 0219
// Missing XML comment for publicly visible type or member '...'
#pragma warning disable 1591
// Ambiguous reference in cref attribute
#pragma warning disable 419

namespace BasicInt.Grammar {
using System;
using System.IO;
using System.Text;
using System.Diagnostics;
using System.Collections.Generic;
using Antlr4.Runtime;
using Antlr4.Runtime.Atn;
using Antlr4.Runtime.Misc;
using Antlr4.Runtime.Tree;
using DFA = Antlr4.Runtime.Dfa.DFA;

[System.CodeDom.Compiler.GeneratedCode("ANTLR", "4.13.1")]
[System.CLSCompliant(false)]
public partial class BasicCParser : Parser {
	protected static DFA[] decisionToDFA;
	protected static PredictionContextCache sharedContextCache = new PredictionContextCache();
	public const int
		WHILE=1, RETURN=2, IMPORT=3, IF=4, ELSE=5, EOL=6, PRINT=7, READ=8, INTEGER=9, 
		DOUBLE=10, BOOLEAN=11, STRING=12, VOID=13, SUM=14, SUB=15, DIV=16, MULT=17, 
		MOD=18, ASSIGN=19, SEP=20, LP=21, RP=22, LB=23, RB=24, LE=25, LT=26, GT=27, 
		GE=28, EQ=29, NE=30, NUMD=31, BOOL=32, NUM=33, VAR=34, STR=35, COMMENT=36, 
		WS=37;
	public const int
		RULE_prog = 0, RULE_line = 1, RULE_atrib = 2, RULE_input = 3, RULE_output = 4, 
		RULE_expr = 5, RULE_term = 6, RULE_factor = 7, RULE_controlflow = 8, RULE_loop = 9, 
		RULE_block = 10, RULE_rblock = 11, RULE_rbody = 12, RULE_bexpr = 13, RULE_function = 14, 
		RULE_params = 15, RULE_paramsCall = 16, RULE_callFunction = 17, RULE_lib = 18, 
		RULE_typecast = 19;
	public static readonly string[] ruleNames = {
		"prog", "line", "atrib", "input", "output", "expr", "term", "factor", 
		"controlflow", "loop", "block", "rblock", "rbody", "bexpr", "function", 
		"params", "paramsCall", "callFunction", "lib", "typecast"
	};

	private static readonly string[] _LiteralNames = {
		null, "'while'", "'return'", "'#import'", "'if'", "'else'", "';'", "'print'", 
		"'read'", "'int'", "'double'", "'bool'", "'str'", "'void'", "'+'", "'-'", 
		"'/'", "'*'", "'%'", "'='", "','", "'('", "')'", "'{'", "'}'", "'<='", 
		"'<'", "'>'", "'>='", "'=='", "'!='"
	};
	private static readonly string[] _SymbolicNames = {
		null, "WHILE", "RETURN", "IMPORT", "IF", "ELSE", "EOL", "PRINT", "READ", 
		"INTEGER", "DOUBLE", "BOOLEAN", "STRING", "VOID", "SUM", "SUB", "DIV", 
		"MULT", "MOD", "ASSIGN", "SEP", "LP", "RP", "LB", "RB", "LE", "LT", "GT", 
		"GE", "EQ", "NE", "NUMD", "BOOL", "NUM", "VAR", "STR", "COMMENT", "WS"
	};
	public static readonly IVocabulary DefaultVocabulary = new Vocabulary(_LiteralNames, _SymbolicNames);

	[NotNull]
	public override IVocabulary Vocabulary
	{
		get
		{
			return DefaultVocabulary;
		}
	}

	public override string GrammarFileName { get { return "BasicC.g4"; } }

	public override string[] RuleNames { get { return ruleNames; } }

	public override int[] SerializedAtn { get { return _serializedATN; } }

	static BasicCParser() {
		decisionToDFA = new DFA[_ATN.NumberOfDecisions];
		for (int i = 0; i < _ATN.NumberOfDecisions; i++) {
			decisionToDFA[i] = new DFA(_ATN.GetDecisionState(i), i);
		}
	}

		public BasicCParser(ITokenStream input) : this(input, Console.Out, Console.Error) { }

		public BasicCParser(ITokenStream input, TextWriter output, TextWriter errorOutput)
		: base(input, output, errorOutput)
	{
		Interpreter = new ParserATNSimulator(this, _ATN, decisionToDFA, sharedContextCache);
	}

	public partial class ProgContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public LineContext[] line() {
			return GetRuleContexts<LineContext>();
		}
		[System.Diagnostics.DebuggerNonUserCode] public LineContext line(int i) {
			return GetRuleContext<LineContext>(i);
		}
		public ProgContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_prog; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IBasicCListener typedListener = listener as IBasicCListener;
			if (typedListener != null) typedListener.EnterProg(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IBasicCListener typedListener = listener as IBasicCListener;
			if (typedListener != null) typedListener.ExitProg(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IBasicCVisitor<TResult> typedVisitor = visitor as IBasicCVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitProg(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public ProgContext prog() {
		ProgContext _localctx = new ProgContext(Context, State);
		EnterRule(_localctx, 0, RULE_prog);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 41;
			ErrorHandler.Sync(this);
			_la = TokenStream.LA(1);
			do {
				{
				{
				State = 40;
				line();
				}
				}
				State = 43;
				ErrorHandler.Sync(this);
				_la = TokenStream.LA(1);
			} while ( (((_la) & ~0x3f) == 0 && ((1L << _la) & 17181982618L) != 0) );
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class LineContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public AtribContext atrib() {
			return GetRuleContext<AtribContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode EOL() { return GetToken(BasicCParser.EOL, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public InputContext input() {
			return GetRuleContext<InputContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public OutputContext output() {
			return GetRuleContext<OutputContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ControlflowContext controlflow() {
			return GetRuleContext<ControlflowContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public LoopContext loop() {
			return GetRuleContext<LoopContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public FunctionContext function() {
			return GetRuleContext<FunctionContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public CallFunctionContext callFunction() {
			return GetRuleContext<CallFunctionContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public LibContext lib() {
			return GetRuleContext<LibContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public TypecastContext typecast() {
			return GetRuleContext<TypecastContext>(0);
		}
		public LineContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_line; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IBasicCListener typedListener = listener as IBasicCListener;
			if (typedListener != null) typedListener.EnterLine(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IBasicCListener typedListener = listener as IBasicCListener;
			if (typedListener != null) typedListener.ExitLine(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IBasicCVisitor<TResult> typedVisitor = visitor as IBasicCVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitLine(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public LineContext line() {
		LineContext _localctx = new LineContext(Context, State);
		EnterRule(_localctx, 2, RULE_line);
		try {
			State = 64;
			ErrorHandler.Sync(this);
			switch ( Interpreter.AdaptivePredict(TokenStream,1,Context) ) {
			case 1:
				EnterOuterAlt(_localctx, 1);
				{
				State = 45;
				atrib();
				State = 46;
				Match(EOL);
				}
				break;
			case 2:
				EnterOuterAlt(_localctx, 2);
				{
				State = 48;
				input();
				State = 49;
				Match(EOL);
				}
				break;
			case 3:
				EnterOuterAlt(_localctx, 3);
				{
				State = 51;
				output();
				State = 52;
				Match(EOL);
				}
				break;
			case 4:
				EnterOuterAlt(_localctx, 4);
				{
				State = 54;
				controlflow();
				}
				break;
			case 5:
				EnterOuterAlt(_localctx, 5);
				{
				State = 55;
				loop();
				}
				break;
			case 6:
				EnterOuterAlt(_localctx, 6);
				{
				State = 56;
				function();
				}
				break;
			case 7:
				EnterOuterAlt(_localctx, 7);
				{
				State = 57;
				callFunction();
				State = 58;
				Match(EOL);
				}
				break;
			case 8:
				EnterOuterAlt(_localctx, 8);
				{
				State = 60;
				lib();
				}
				break;
			case 9:
				EnterOuterAlt(_localctx, 9);
				{
				State = 61;
				typecast();
				State = 62;
				Match(EOL);
				}
				break;
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class AtribContext : ParserRuleContext {
		public AtribContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_atrib; } }
	 
		public AtribContext() { }
		public virtual void CopyFrom(AtribContext context) {
			base.CopyFrom(context);
		}
	}
	public partial class VariavelExistenteBooleanContext : AtribContext {
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode VAR() { return GetToken(BasicCParser.VAR, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode ASSIGN() { return GetToken(BasicCParser.ASSIGN, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode BOOL() { return GetToken(BasicCParser.BOOL, 0); }
		public VariavelExistenteBooleanContext(AtribContext context) { CopyFrom(context); }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IBasicCListener typedListener = listener as IBasicCListener;
			if (typedListener != null) typedListener.EnterVariavelExistenteBoolean(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IBasicCListener typedListener = listener as IBasicCListener;
			if (typedListener != null) typedListener.ExitVariavelExistenteBoolean(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IBasicCVisitor<TResult> typedVisitor = visitor as IBasicCVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitVariavelExistenteBoolean(this);
			else return visitor.VisitChildren(this);
		}
	}
	public partial class VariavelNovaContext : AtribContext {
		public IToken TYPE;
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode VAR() { return GetToken(BasicCParser.VAR, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode ASSIGN() { return GetToken(BasicCParser.ASSIGN, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ExprContext expr() {
			return GetRuleContext<ExprContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode INTEGER() { return GetToken(BasicCParser.INTEGER, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode DOUBLE() { return GetToken(BasicCParser.DOUBLE, 0); }
		public VariavelNovaContext(AtribContext context) { CopyFrom(context); }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IBasicCListener typedListener = listener as IBasicCListener;
			if (typedListener != null) typedListener.EnterVariavelNova(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IBasicCListener typedListener = listener as IBasicCListener;
			if (typedListener != null) typedListener.ExitVariavelNova(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IBasicCVisitor<TResult> typedVisitor = visitor as IBasicCVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitVariavelNova(this);
			else return visitor.VisitChildren(this);
		}
	}
	public partial class VariavelExistenteStringContext : AtribContext {
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode VAR() { return GetToken(BasicCParser.VAR, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode ASSIGN() { return GetToken(BasicCParser.ASSIGN, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode STR() { return GetToken(BasicCParser.STR, 0); }
		public VariavelExistenteStringContext(AtribContext context) { CopyFrom(context); }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IBasicCListener typedListener = listener as IBasicCListener;
			if (typedListener != null) typedListener.EnterVariavelExistenteString(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IBasicCListener typedListener = listener as IBasicCListener;
			if (typedListener != null) typedListener.ExitVariavelExistenteString(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IBasicCVisitor<TResult> typedVisitor = visitor as IBasicCVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitVariavelExistenteString(this);
			else return visitor.VisitChildren(this);
		}
	}
	public partial class VariavelNovaStringContext : AtribContext {
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode STRING() { return GetToken(BasicCParser.STRING, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode VAR() { return GetToken(BasicCParser.VAR, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode ASSIGN() { return GetToken(BasicCParser.ASSIGN, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode STR() { return GetToken(BasicCParser.STR, 0); }
		public VariavelNovaStringContext(AtribContext context) { CopyFrom(context); }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IBasicCListener typedListener = listener as IBasicCListener;
			if (typedListener != null) typedListener.EnterVariavelNovaString(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IBasicCListener typedListener = listener as IBasicCListener;
			if (typedListener != null) typedListener.ExitVariavelNovaString(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IBasicCVisitor<TResult> typedVisitor = visitor as IBasicCVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitVariavelNovaString(this);
			else return visitor.VisitChildren(this);
		}
	}
	public partial class VariavelNovaBooleanContext : AtribContext {
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode BOOLEAN() { return GetToken(BasicCParser.BOOLEAN, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode VAR() { return GetToken(BasicCParser.VAR, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode ASSIGN() { return GetToken(BasicCParser.ASSIGN, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode BOOL() { return GetToken(BasicCParser.BOOL, 0); }
		public VariavelNovaBooleanContext(AtribContext context) { CopyFrom(context); }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IBasicCListener typedListener = listener as IBasicCListener;
			if (typedListener != null) typedListener.EnterVariavelNovaBoolean(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IBasicCListener typedListener = listener as IBasicCListener;
			if (typedListener != null) typedListener.ExitVariavelNovaBoolean(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IBasicCVisitor<TResult> typedVisitor = visitor as IBasicCVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitVariavelNovaBoolean(this);
			else return visitor.VisitChildren(this);
		}
	}
	public partial class VariavelExistenteContext : AtribContext {
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode VAR() { return GetToken(BasicCParser.VAR, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode ASSIGN() { return GetToken(BasicCParser.ASSIGN, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ExprContext expr() {
			return GetRuleContext<ExprContext>(0);
		}
		public VariavelExistenteContext(AtribContext context) { CopyFrom(context); }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IBasicCListener typedListener = listener as IBasicCListener;
			if (typedListener != null) typedListener.EnterVariavelExistente(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IBasicCListener typedListener = listener as IBasicCListener;
			if (typedListener != null) typedListener.ExitVariavelExistente(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IBasicCVisitor<TResult> typedVisitor = visitor as IBasicCVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitVariavelExistente(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public AtribContext atrib() {
		AtribContext _localctx = new AtribContext(Context, State);
		EnterRule(_localctx, 4, RULE_atrib);
		int _la;
		try {
			State = 87;
			ErrorHandler.Sync(this);
			switch ( Interpreter.AdaptivePredict(TokenStream,2,Context) ) {
			case 1:
				_localctx = new VariavelExistenteStringContext(_localctx);
				EnterOuterAlt(_localctx, 1);
				{
				State = 66;
				Match(VAR);
				State = 67;
				Match(ASSIGN);
				State = 68;
				Match(STR);
				}
				break;
			case 2:
				_localctx = new VariavelNovaStringContext(_localctx);
				EnterOuterAlt(_localctx, 2);
				{
				State = 69;
				Match(STRING);
				State = 70;
				Match(VAR);
				State = 71;
				Match(ASSIGN);
				State = 72;
				Match(STR);
				}
				break;
			case 3:
				_localctx = new VariavelNovaContext(_localctx);
				EnterOuterAlt(_localctx, 3);
				{
				State = 73;
				((VariavelNovaContext)_localctx).TYPE = TokenStream.LT(1);
				_la = TokenStream.LA(1);
				if ( !(_la==INTEGER || _la==DOUBLE) ) {
					((VariavelNovaContext)_localctx).TYPE = ErrorHandler.RecoverInline(this);
				}
				else {
					ErrorHandler.ReportMatch(this);
				    Consume();
				}
				State = 74;
				Match(VAR);
				State = 75;
				Match(ASSIGN);
				State = 76;
				expr();
				}
				break;
			case 4:
				_localctx = new VariavelNovaBooleanContext(_localctx);
				EnterOuterAlt(_localctx, 4);
				{
				State = 77;
				Match(BOOLEAN);
				State = 78;
				Match(VAR);
				State = 79;
				Match(ASSIGN);
				State = 80;
				Match(BOOL);
				}
				break;
			case 5:
				_localctx = new VariavelExistenteContext(_localctx);
				EnterOuterAlt(_localctx, 5);
				{
				State = 81;
				Match(VAR);
				State = 82;
				Match(ASSIGN);
				State = 83;
				expr();
				}
				break;
			case 6:
				_localctx = new VariavelExistenteBooleanContext(_localctx);
				EnterOuterAlt(_localctx, 6);
				{
				State = 84;
				Match(VAR);
				State = 85;
				Match(ASSIGN);
				State = 86;
				Match(BOOL);
				}
				break;
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class InputContext : ParserRuleContext {
		public InputContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_input; } }
	 
		public InputContext() { }
		public virtual void CopyFrom(InputContext context) {
			base.CopyFrom(context);
		}
	}
	public partial class InputVarContext : InputContext {
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode READ() { return GetToken(BasicCParser.READ, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode LP() { return GetToken(BasicCParser.LP, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode VAR() { return GetToken(BasicCParser.VAR, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode RP() { return GetToken(BasicCParser.RP, 0); }
		public InputVarContext(InputContext context) { CopyFrom(context); }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IBasicCListener typedListener = listener as IBasicCListener;
			if (typedListener != null) typedListener.EnterInputVar(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IBasicCListener typedListener = listener as IBasicCListener;
			if (typedListener != null) typedListener.ExitInputVar(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IBasicCVisitor<TResult> typedVisitor = visitor as IBasicCVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitInputVar(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public InputContext input() {
		InputContext _localctx = new InputContext(Context, State);
		EnterRule(_localctx, 6, RULE_input);
		try {
			_localctx = new InputVarContext(_localctx);
			EnterOuterAlt(_localctx, 1);
			{
			State = 89;
			Match(READ);
			State = 90;
			Match(LP);
			State = 91;
			Match(VAR);
			State = 92;
			Match(RP);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class OutputContext : ParserRuleContext {
		public OutputContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_output; } }
	 
		public OutputContext() { }
		public virtual void CopyFrom(OutputContext context) {
			base.CopyFrom(context);
		}
	}
	public partial class OutputVarContext : OutputContext {
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode PRINT() { return GetToken(BasicCParser.PRINT, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode LP() { return GetToken(BasicCParser.LP, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode VAR() { return GetToken(BasicCParser.VAR, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode RP() { return GetToken(BasicCParser.RP, 0); }
		public OutputVarContext(OutputContext context) { CopyFrom(context); }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IBasicCListener typedListener = listener as IBasicCListener;
			if (typedListener != null) typedListener.EnterOutputVar(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IBasicCListener typedListener = listener as IBasicCListener;
			if (typedListener != null) typedListener.ExitOutputVar(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IBasicCVisitor<TResult> typedVisitor = visitor as IBasicCVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitOutputVar(this);
			else return visitor.VisitChildren(this);
		}
	}
	public partial class OutputExprContext : OutputContext {
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode PRINT() { return GetToken(BasicCParser.PRINT, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode LP() { return GetToken(BasicCParser.LP, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ExprContext expr() {
			return GetRuleContext<ExprContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode RP() { return GetToken(BasicCParser.RP, 0); }
		public OutputExprContext(OutputContext context) { CopyFrom(context); }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IBasicCListener typedListener = listener as IBasicCListener;
			if (typedListener != null) typedListener.EnterOutputExpr(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IBasicCListener typedListener = listener as IBasicCListener;
			if (typedListener != null) typedListener.ExitOutputExpr(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IBasicCVisitor<TResult> typedVisitor = visitor as IBasicCVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitOutputExpr(this);
			else return visitor.VisitChildren(this);
		}
	}
	public partial class OutputStrContext : OutputContext {
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode PRINT() { return GetToken(BasicCParser.PRINT, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode LP() { return GetToken(BasicCParser.LP, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode STR() { return GetToken(BasicCParser.STR, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode RP() { return GetToken(BasicCParser.RP, 0); }
		public OutputStrContext(OutputContext context) { CopyFrom(context); }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IBasicCListener typedListener = listener as IBasicCListener;
			if (typedListener != null) typedListener.EnterOutputStr(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IBasicCListener typedListener = listener as IBasicCListener;
			if (typedListener != null) typedListener.ExitOutputStr(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IBasicCVisitor<TResult> typedVisitor = visitor as IBasicCVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitOutputStr(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public OutputContext output() {
		OutputContext _localctx = new OutputContext(Context, State);
		EnterRule(_localctx, 8, RULE_output);
		try {
			State = 107;
			ErrorHandler.Sync(this);
			switch ( Interpreter.AdaptivePredict(TokenStream,3,Context) ) {
			case 1:
				_localctx = new OutputStrContext(_localctx);
				EnterOuterAlt(_localctx, 1);
				{
				State = 94;
				Match(PRINT);
				State = 95;
				Match(LP);
				State = 96;
				Match(STR);
				State = 97;
				Match(RP);
				}
				break;
			case 2:
				_localctx = new OutputVarContext(_localctx);
				EnterOuterAlt(_localctx, 2);
				{
				State = 98;
				Match(PRINT);
				State = 99;
				Match(LP);
				State = 100;
				Match(VAR);
				State = 101;
				Match(RP);
				}
				break;
			case 3:
				_localctx = new OutputExprContext(_localctx);
				EnterOuterAlt(_localctx, 3);
				{
				State = 102;
				Match(PRINT);
				State = 103;
				Match(LP);
				State = 104;
				expr();
				State = 105;
				Match(RP);
				}
				break;
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class ExprContext : ParserRuleContext {
		public ExprContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_expr; } }
	 
		public ExprContext() { }
		public virtual void CopyFrom(ExprContext context) {
			base.CopyFrom(context);
		}
	}
	public partial class ExprSubContext : ExprContext {
		[System.Diagnostics.DebuggerNonUserCode] public TermContext term() {
			return GetRuleContext<TermContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode SUB() { return GetToken(BasicCParser.SUB, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ExprContext expr() {
			return GetRuleContext<ExprContext>(0);
		}
		public ExprSubContext(ExprContext context) { CopyFrom(context); }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IBasicCListener typedListener = listener as IBasicCListener;
			if (typedListener != null) typedListener.EnterExprSub(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IBasicCListener typedListener = listener as IBasicCListener;
			if (typedListener != null) typedListener.ExitExprSub(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IBasicCVisitor<TResult> typedVisitor = visitor as IBasicCVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitExprSub(this);
			else return visitor.VisitChildren(this);
		}
	}
	public partial class ExprSumContext : ExprContext {
		[System.Diagnostics.DebuggerNonUserCode] public TermContext term() {
			return GetRuleContext<TermContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode SUM() { return GetToken(BasicCParser.SUM, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ExprContext expr() {
			return GetRuleContext<ExprContext>(0);
		}
		public ExprSumContext(ExprContext context) { CopyFrom(context); }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IBasicCListener typedListener = listener as IBasicCListener;
			if (typedListener != null) typedListener.EnterExprSum(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IBasicCListener typedListener = listener as IBasicCListener;
			if (typedListener != null) typedListener.ExitExprSum(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IBasicCVisitor<TResult> typedVisitor = visitor as IBasicCVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitExprSum(this);
			else return visitor.VisitChildren(this);
		}
	}
	public partial class ExprTermContext : ExprContext {
		[System.Diagnostics.DebuggerNonUserCode] public TermContext term() {
			return GetRuleContext<TermContext>(0);
		}
		public ExprTermContext(ExprContext context) { CopyFrom(context); }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IBasicCListener typedListener = listener as IBasicCListener;
			if (typedListener != null) typedListener.EnterExprTerm(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IBasicCListener typedListener = listener as IBasicCListener;
			if (typedListener != null) typedListener.ExitExprTerm(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IBasicCVisitor<TResult> typedVisitor = visitor as IBasicCVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitExprTerm(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public ExprContext expr() {
		ExprContext _localctx = new ExprContext(Context, State);
		EnterRule(_localctx, 10, RULE_expr);
		try {
			State = 118;
			ErrorHandler.Sync(this);
			switch ( Interpreter.AdaptivePredict(TokenStream,4,Context) ) {
			case 1:
				_localctx = new ExprSumContext(_localctx);
				EnterOuterAlt(_localctx, 1);
				{
				State = 109;
				term();
				State = 110;
				Match(SUM);
				State = 111;
				expr();
				}
				break;
			case 2:
				_localctx = new ExprSubContext(_localctx);
				EnterOuterAlt(_localctx, 2);
				{
				State = 113;
				term();
				State = 114;
				Match(SUB);
				State = 115;
				expr();
				}
				break;
			case 3:
				_localctx = new ExprTermContext(_localctx);
				EnterOuterAlt(_localctx, 3);
				{
				State = 117;
				term();
				}
				break;
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class TermContext : ParserRuleContext {
		public TermContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_term; } }
	 
		public TermContext() { }
		public virtual void CopyFrom(TermContext context) {
			base.CopyFrom(context);
		}
	}
	public partial class TermDivContext : TermContext {
		[System.Diagnostics.DebuggerNonUserCode] public FactorContext factor() {
			return GetRuleContext<FactorContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode DIV() { return GetToken(BasicCParser.DIV, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public TermContext term() {
			return GetRuleContext<TermContext>(0);
		}
		public TermDivContext(TermContext context) { CopyFrom(context); }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IBasicCListener typedListener = listener as IBasicCListener;
			if (typedListener != null) typedListener.EnterTermDiv(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IBasicCListener typedListener = listener as IBasicCListener;
			if (typedListener != null) typedListener.ExitTermDiv(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IBasicCVisitor<TResult> typedVisitor = visitor as IBasicCVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitTermDiv(this);
			else return visitor.VisitChildren(this);
		}
	}
	public partial class TermModContext : TermContext {
		[System.Diagnostics.DebuggerNonUserCode] public FactorContext factor() {
			return GetRuleContext<FactorContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode MOD() { return GetToken(BasicCParser.MOD, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public TermContext term() {
			return GetRuleContext<TermContext>(0);
		}
		public TermModContext(TermContext context) { CopyFrom(context); }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IBasicCListener typedListener = listener as IBasicCListener;
			if (typedListener != null) typedListener.EnterTermMod(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IBasicCListener typedListener = listener as IBasicCListener;
			if (typedListener != null) typedListener.ExitTermMod(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IBasicCVisitor<TResult> typedVisitor = visitor as IBasicCVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitTermMod(this);
			else return visitor.VisitChildren(this);
		}
	}
	public partial class TermMultContext : TermContext {
		[System.Diagnostics.DebuggerNonUserCode] public FactorContext factor() {
			return GetRuleContext<FactorContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode MULT() { return GetToken(BasicCParser.MULT, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public TermContext term() {
			return GetRuleContext<TermContext>(0);
		}
		public TermMultContext(TermContext context) { CopyFrom(context); }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IBasicCListener typedListener = listener as IBasicCListener;
			if (typedListener != null) typedListener.EnterTermMult(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IBasicCListener typedListener = listener as IBasicCListener;
			if (typedListener != null) typedListener.ExitTermMult(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IBasicCVisitor<TResult> typedVisitor = visitor as IBasicCVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitTermMult(this);
			else return visitor.VisitChildren(this);
		}
	}
	public partial class TermFactorContext : TermContext {
		[System.Diagnostics.DebuggerNonUserCode] public FactorContext factor() {
			return GetRuleContext<FactorContext>(0);
		}
		public TermFactorContext(TermContext context) { CopyFrom(context); }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IBasicCListener typedListener = listener as IBasicCListener;
			if (typedListener != null) typedListener.EnterTermFactor(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IBasicCListener typedListener = listener as IBasicCListener;
			if (typedListener != null) typedListener.ExitTermFactor(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IBasicCVisitor<TResult> typedVisitor = visitor as IBasicCVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitTermFactor(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public TermContext term() {
		TermContext _localctx = new TermContext(Context, State);
		EnterRule(_localctx, 12, RULE_term);
		try {
			State = 133;
			ErrorHandler.Sync(this);
			switch ( Interpreter.AdaptivePredict(TokenStream,5,Context) ) {
			case 1:
				_localctx = new TermMultContext(_localctx);
				EnterOuterAlt(_localctx, 1);
				{
				State = 120;
				factor();
				State = 121;
				Match(MULT);
				State = 122;
				term();
				}
				break;
			case 2:
				_localctx = new TermDivContext(_localctx);
				EnterOuterAlt(_localctx, 2);
				{
				State = 124;
				factor();
				State = 125;
				Match(DIV);
				State = 126;
				term();
				}
				break;
			case 3:
				_localctx = new TermModContext(_localctx);
				EnterOuterAlt(_localctx, 3);
				{
				State = 128;
				factor();
				State = 129;
				Match(MOD);
				State = 130;
				term();
				}
				break;
			case 4:
				_localctx = new TermFactorContext(_localctx);
				EnterOuterAlt(_localctx, 4);
				{
				State = 132;
				factor();
				}
				break;
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class FactorContext : ParserRuleContext {
		public FactorContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_factor; } }
	 
		public FactorContext() { }
		public virtual void CopyFrom(FactorContext context) {
			base.CopyFrom(context);
		}
	}
	public partial class FactorStrContext : FactorContext {
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode STR() { return GetToken(BasicCParser.STR, 0); }
		public FactorStrContext(FactorContext context) { CopyFrom(context); }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IBasicCListener typedListener = listener as IBasicCListener;
			if (typedListener != null) typedListener.EnterFactorStr(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IBasicCListener typedListener = listener as IBasicCListener;
			if (typedListener != null) typedListener.ExitFactorStr(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IBasicCVisitor<TResult> typedVisitor = visitor as IBasicCVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitFactorStr(this);
			else return visitor.VisitChildren(this);
		}
	}
	public partial class FactorNumContext : FactorContext {
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode NUM() { return GetToken(BasicCParser.NUM, 0); }
		public FactorNumContext(FactorContext context) { CopyFrom(context); }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IBasicCListener typedListener = listener as IBasicCListener;
			if (typedListener != null) typedListener.EnterFactorNum(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IBasicCListener typedListener = listener as IBasicCListener;
			if (typedListener != null) typedListener.ExitFactorNum(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IBasicCVisitor<TResult> typedVisitor = visitor as IBasicCVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitFactorNum(this);
			else return visitor.VisitChildren(this);
		}
	}
	public partial class FactorVarContext : FactorContext {
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode VAR() { return GetToken(BasicCParser.VAR, 0); }
		public FactorVarContext(FactorContext context) { CopyFrom(context); }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IBasicCListener typedListener = listener as IBasicCListener;
			if (typedListener != null) typedListener.EnterFactorVar(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IBasicCListener typedListener = listener as IBasicCListener;
			if (typedListener != null) typedListener.ExitFactorVar(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IBasicCVisitor<TResult> typedVisitor = visitor as IBasicCVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitFactorVar(this);
			else return visitor.VisitChildren(this);
		}
	}
	public partial class FactorExprContext : FactorContext {
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode LP() { return GetToken(BasicCParser.LP, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ExprContext expr() {
			return GetRuleContext<ExprContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode RP() { return GetToken(BasicCParser.RP, 0); }
		public FactorExprContext(FactorContext context) { CopyFrom(context); }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IBasicCListener typedListener = listener as IBasicCListener;
			if (typedListener != null) typedListener.EnterFactorExpr(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IBasicCListener typedListener = listener as IBasicCListener;
			if (typedListener != null) typedListener.ExitFactorExpr(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IBasicCVisitor<TResult> typedVisitor = visitor as IBasicCVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitFactorExpr(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public FactorContext factor() {
		FactorContext _localctx = new FactorContext(Context, State);
		EnterRule(_localctx, 14, RULE_factor);
		try {
			State = 142;
			ErrorHandler.Sync(this);
			switch (TokenStream.LA(1)) {
			case LP:
				_localctx = new FactorExprContext(_localctx);
				EnterOuterAlt(_localctx, 1);
				{
				State = 135;
				Match(LP);
				State = 136;
				expr();
				State = 137;
				Match(RP);
				}
				break;
			case VAR:
				_localctx = new FactorVarContext(_localctx);
				EnterOuterAlt(_localctx, 2);
				{
				State = 139;
				Match(VAR);
				}
				break;
			case NUM:
				_localctx = new FactorNumContext(_localctx);
				EnterOuterAlt(_localctx, 3);
				{
				State = 140;
				Match(NUM);
				}
				break;
			case STR:
				_localctx = new FactorStrContext(_localctx);
				EnterOuterAlt(_localctx, 4);
				{
				State = 141;
				Match(STR);
				}
				break;
			default:
				throw new NoViableAltException(this);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class ControlflowContext : ParserRuleContext {
		public ControlflowContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_controlflow; } }
	 
		public ControlflowContext() { }
		public virtual void CopyFrom(ControlflowContext context) {
			base.CopyFrom(context);
		}
	}
	public partial class IfBlockContext : ControlflowContext {
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode IF() { return GetToken(BasicCParser.IF, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode LP() { return GetToken(BasicCParser.LP, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public BexprContext bexpr() {
			return GetRuleContext<BexprContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode RP() { return GetToken(BasicCParser.RP, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public BlockContext block() {
			return GetRuleContext<BlockContext>(0);
		}
		public IfBlockContext(ControlflowContext context) { CopyFrom(context); }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IBasicCListener typedListener = listener as IBasicCListener;
			if (typedListener != null) typedListener.EnterIfBlock(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IBasicCListener typedListener = listener as IBasicCListener;
			if (typedListener != null) typedListener.ExitIfBlock(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IBasicCVisitor<TResult> typedVisitor = visitor as IBasicCVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitIfBlock(this);
			else return visitor.VisitChildren(this);
		}
	}
	public partial class IfElseBlockContext : ControlflowContext {
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode IF() { return GetToken(BasicCParser.IF, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode LP() { return GetToken(BasicCParser.LP, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public BexprContext bexpr() {
			return GetRuleContext<BexprContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode RP() { return GetToken(BasicCParser.RP, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public BlockContext[] block() {
			return GetRuleContexts<BlockContext>();
		}
		[System.Diagnostics.DebuggerNonUserCode] public BlockContext block(int i) {
			return GetRuleContext<BlockContext>(i);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode ELSE() { return GetToken(BasicCParser.ELSE, 0); }
		public IfElseBlockContext(ControlflowContext context) { CopyFrom(context); }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IBasicCListener typedListener = listener as IBasicCListener;
			if (typedListener != null) typedListener.EnterIfElseBlock(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IBasicCListener typedListener = listener as IBasicCListener;
			if (typedListener != null) typedListener.ExitIfElseBlock(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IBasicCVisitor<TResult> typedVisitor = visitor as IBasicCVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitIfElseBlock(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public ControlflowContext controlflow() {
		ControlflowContext _localctx = new ControlflowContext(Context, State);
		EnterRule(_localctx, 16, RULE_controlflow);
		try {
			State = 158;
			ErrorHandler.Sync(this);
			switch ( Interpreter.AdaptivePredict(TokenStream,7,Context) ) {
			case 1:
				_localctx = new IfBlockContext(_localctx);
				EnterOuterAlt(_localctx, 1);
				{
				State = 144;
				Match(IF);
				State = 145;
				Match(LP);
				State = 146;
				bexpr();
				State = 147;
				Match(RP);
				State = 148;
				block();
				}
				break;
			case 2:
				_localctx = new IfElseBlockContext(_localctx);
				EnterOuterAlt(_localctx, 2);
				{
				State = 150;
				Match(IF);
				State = 151;
				Match(LP);
				State = 152;
				bexpr();
				State = 153;
				Match(RP);
				State = 154;
				block();
				State = 155;
				Match(ELSE);
				State = 156;
				block();
				}
				break;
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class LoopContext : ParserRuleContext {
		public LoopContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_loop; } }
	 
		public LoopContext() { }
		public virtual void CopyFrom(LoopContext context) {
			base.CopyFrom(context);
		}
	}
	public partial class LoopBlockContext : LoopContext {
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode WHILE() { return GetToken(BasicCParser.WHILE, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode LP() { return GetToken(BasicCParser.LP, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public BexprContext bexpr() {
			return GetRuleContext<BexprContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode RP() { return GetToken(BasicCParser.RP, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public BlockContext block() {
			return GetRuleContext<BlockContext>(0);
		}
		public LoopBlockContext(LoopContext context) { CopyFrom(context); }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IBasicCListener typedListener = listener as IBasicCListener;
			if (typedListener != null) typedListener.EnterLoopBlock(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IBasicCListener typedListener = listener as IBasicCListener;
			if (typedListener != null) typedListener.ExitLoopBlock(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IBasicCVisitor<TResult> typedVisitor = visitor as IBasicCVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitLoopBlock(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public LoopContext loop() {
		LoopContext _localctx = new LoopContext(Context, State);
		EnterRule(_localctx, 18, RULE_loop);
		try {
			_localctx = new LoopBlockContext(_localctx);
			EnterOuterAlt(_localctx, 1);
			{
			State = 160;
			Match(WHILE);
			State = 161;
			Match(LP);
			State = 162;
			bexpr();
			State = 163;
			Match(RP);
			State = 164;
			block();
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class BlockContext : ParserRuleContext {
		public BlockContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_block; } }
	 
		public BlockContext() { }
		public virtual void CopyFrom(BlockContext context) {
			base.CopyFrom(context);
		}
	}
	public partial class BlockLineContext : BlockContext {
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode LB() { return GetToken(BasicCParser.LB, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode RB() { return GetToken(BasicCParser.RB, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public LineContext[] line() {
			return GetRuleContexts<LineContext>();
		}
		[System.Diagnostics.DebuggerNonUserCode] public LineContext line(int i) {
			return GetRuleContext<LineContext>(i);
		}
		public BlockLineContext(BlockContext context) { CopyFrom(context); }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IBasicCListener typedListener = listener as IBasicCListener;
			if (typedListener != null) typedListener.EnterBlockLine(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IBasicCListener typedListener = listener as IBasicCListener;
			if (typedListener != null) typedListener.ExitBlockLine(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IBasicCVisitor<TResult> typedVisitor = visitor as IBasicCVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitBlockLine(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public BlockContext block() {
		BlockContext _localctx = new BlockContext(Context, State);
		EnterRule(_localctx, 20, RULE_block);
		int _la;
		try {
			_localctx = new BlockLineContext(_localctx);
			EnterOuterAlt(_localctx, 1);
			{
			State = 166;
			Match(LB);
			State = 168;
			ErrorHandler.Sync(this);
			_la = TokenStream.LA(1);
			do {
				{
				{
				State = 167;
				line();
				}
				}
				State = 170;
				ErrorHandler.Sync(this);
				_la = TokenStream.LA(1);
			} while ( (((_la) & ~0x3f) == 0 && ((1L << _la) & 17181982618L) != 0) );
			State = 172;
			Match(RB);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class RblockContext : ParserRuleContext {
		public RblockContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_rblock; } }
	 
		public RblockContext() { }
		public virtual void CopyFrom(RblockContext context) {
			base.CopyFrom(context);
		}
	}
	public partial class FnBlockLineContext : RblockContext {
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode LB() { return GetToken(BasicCParser.LB, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public RbodyContext rbody() {
			return GetRuleContext<RbodyContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode RB() { return GetToken(BasicCParser.RB, 0); }
		public FnBlockLineContext(RblockContext context) { CopyFrom(context); }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IBasicCListener typedListener = listener as IBasicCListener;
			if (typedListener != null) typedListener.EnterFnBlockLine(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IBasicCListener typedListener = listener as IBasicCListener;
			if (typedListener != null) typedListener.ExitFnBlockLine(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IBasicCVisitor<TResult> typedVisitor = visitor as IBasicCVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitFnBlockLine(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public RblockContext rblock() {
		RblockContext _localctx = new RblockContext(Context, State);
		EnterRule(_localctx, 22, RULE_rblock);
		try {
			_localctx = new FnBlockLineContext(_localctx);
			EnterOuterAlt(_localctx, 1);
			{
			State = 174;
			Match(LB);
			State = 175;
			rbody();
			State = 176;
			Match(RB);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class RbodyContext : ParserRuleContext {
		public RbodyContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_rbody; } }
	 
		public RbodyContext() { }
		public virtual void CopyFrom(RbodyContext context) {
			base.CopyFrom(context);
		}
	}
	public partial class FnReturnBoolLineContext : RbodyContext {
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode RETURN() { return GetToken(BasicCParser.RETURN, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode BOOL() { return GetToken(BasicCParser.BOOL, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode EOL() { return GetToken(BasicCParser.EOL, 0); }
		public FnReturnBoolLineContext(RbodyContext context) { CopyFrom(context); }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IBasicCListener typedListener = listener as IBasicCListener;
			if (typedListener != null) typedListener.EnterFnReturnBoolLine(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IBasicCListener typedListener = listener as IBasicCListener;
			if (typedListener != null) typedListener.ExitFnReturnBoolLine(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IBasicCVisitor<TResult> typedVisitor = visitor as IBasicCVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitFnReturnBoolLine(this);
			else return visitor.VisitChildren(this);
		}
	}
	public partial class FnReturnLineContext : RbodyContext {
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode RETURN() { return GetToken(BasicCParser.RETURN, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode EOL() { return GetToken(BasicCParser.EOL, 0); }
		public FnReturnLineContext(RbodyContext context) { CopyFrom(context); }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IBasicCListener typedListener = listener as IBasicCListener;
			if (typedListener != null) typedListener.EnterFnReturnLine(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IBasicCListener typedListener = listener as IBasicCListener;
			if (typedListener != null) typedListener.ExitFnReturnLine(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IBasicCVisitor<TResult> typedVisitor = visitor as IBasicCVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitFnReturnLine(this);
			else return visitor.VisitChildren(this);
		}
	}
	public partial class FnBodyLineContext : RbodyContext {
		[System.Diagnostics.DebuggerNonUserCode] public LineContext line() {
			return GetRuleContext<LineContext>(0);
		}
		public FnBodyLineContext(RbodyContext context) { CopyFrom(context); }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IBasicCListener typedListener = listener as IBasicCListener;
			if (typedListener != null) typedListener.EnterFnBodyLine(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IBasicCListener typedListener = listener as IBasicCListener;
			if (typedListener != null) typedListener.ExitFnBodyLine(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IBasicCVisitor<TResult> typedVisitor = visitor as IBasicCVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitFnBodyLine(this);
			else return visitor.VisitChildren(this);
		}
	}
	public partial class FnReturnStrLineContext : RbodyContext {
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode RETURN() { return GetToken(BasicCParser.RETURN, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode STR() { return GetToken(BasicCParser.STR, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode EOL() { return GetToken(BasicCParser.EOL, 0); }
		public FnReturnStrLineContext(RbodyContext context) { CopyFrom(context); }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IBasicCListener typedListener = listener as IBasicCListener;
			if (typedListener != null) typedListener.EnterFnReturnStrLine(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IBasicCListener typedListener = listener as IBasicCListener;
			if (typedListener != null) typedListener.ExitFnReturnStrLine(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IBasicCVisitor<TResult> typedVisitor = visitor as IBasicCVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitFnReturnStrLine(this);
			else return visitor.VisitChildren(this);
		}
	}
	public partial class FnReturnExprLineContext : RbodyContext {
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode RETURN() { return GetToken(BasicCParser.RETURN, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ExprContext expr() {
			return GetRuleContext<ExprContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode EOL() { return GetToken(BasicCParser.EOL, 0); }
		public FnReturnExprLineContext(RbodyContext context) { CopyFrom(context); }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IBasicCListener typedListener = listener as IBasicCListener;
			if (typedListener != null) typedListener.EnterFnReturnExprLine(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IBasicCListener typedListener = listener as IBasicCListener;
			if (typedListener != null) typedListener.ExitFnReturnExprLine(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IBasicCVisitor<TResult> typedVisitor = visitor as IBasicCVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitFnReturnExprLine(this);
			else return visitor.VisitChildren(this);
		}
	}
	public partial class FnBodyLineMoreContext : RbodyContext {
		[System.Diagnostics.DebuggerNonUserCode] public LineContext line() {
			return GetRuleContext<LineContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public RbodyContext rbody() {
			return GetRuleContext<RbodyContext>(0);
		}
		public FnBodyLineMoreContext(RbodyContext context) { CopyFrom(context); }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IBasicCListener typedListener = listener as IBasicCListener;
			if (typedListener != null) typedListener.EnterFnBodyLineMore(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IBasicCListener typedListener = listener as IBasicCListener;
			if (typedListener != null) typedListener.ExitFnBodyLineMore(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IBasicCVisitor<TResult> typedVisitor = visitor as IBasicCVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitFnBodyLineMore(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public RbodyContext rbody() {
		RbodyContext _localctx = new RbodyContext(Context, State);
		EnterRule(_localctx, 24, RULE_rbody);
		try {
			State = 194;
			ErrorHandler.Sync(this);
			switch ( Interpreter.AdaptivePredict(TokenStream,9,Context) ) {
			case 1:
				_localctx = new FnBodyLineContext(_localctx);
				EnterOuterAlt(_localctx, 1);
				{
				State = 178;
				line();
				}
				break;
			case 2:
				_localctx = new FnBodyLineMoreContext(_localctx);
				EnterOuterAlt(_localctx, 2);
				{
				State = 179;
				line();
				State = 180;
				rbody();
				}
				break;
			case 3:
				_localctx = new FnReturnBoolLineContext(_localctx);
				EnterOuterAlt(_localctx, 3);
				{
				State = 182;
				Match(RETURN);
				State = 183;
				Match(BOOL);
				State = 184;
				Match(EOL);
				}
				break;
			case 4:
				_localctx = new FnReturnStrLineContext(_localctx);
				EnterOuterAlt(_localctx, 4);
				{
				State = 185;
				Match(RETURN);
				State = 186;
				Match(STR);
				State = 187;
				Match(EOL);
				}
				break;
			case 5:
				_localctx = new FnReturnExprLineContext(_localctx);
				EnterOuterAlt(_localctx, 5);
				{
				State = 188;
				Match(RETURN);
				State = 189;
				expr();
				State = 190;
				Match(EOL);
				}
				break;
			case 6:
				_localctx = new FnReturnLineContext(_localctx);
				EnterOuterAlt(_localctx, 6);
				{
				State = 192;
				Match(RETURN);
				State = 193;
				Match(EOL);
				}
				break;
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class BexprContext : ParserRuleContext {
		public BexprContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_bexpr; } }
	 
		public BexprContext() { }
		public virtual void CopyFrom(BexprContext context) {
			base.CopyFrom(context);
		}
	}
	public partial class BexprExprContext : BexprContext {
		[System.Diagnostics.DebuggerNonUserCode] public ExprContext expr() {
			return GetRuleContext<ExprContext>(0);
		}
		public BexprExprContext(BexprContext context) { CopyFrom(context); }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IBasicCListener typedListener = listener as IBasicCListener;
			if (typedListener != null) typedListener.EnterBexprExpr(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IBasicCListener typedListener = listener as IBasicCListener;
			if (typedListener != null) typedListener.ExitBexprExpr(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IBasicCVisitor<TResult> typedVisitor = visitor as IBasicCVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitBexprExpr(this);
			else return visitor.VisitChildren(this);
		}
	}
	public partial class BexprRelopContext : BexprContext {
		public IToken RELOP;
		[System.Diagnostics.DebuggerNonUserCode] public ExprContext[] expr() {
			return GetRuleContexts<ExprContext>();
		}
		[System.Diagnostics.DebuggerNonUserCode] public ExprContext expr(int i) {
			return GetRuleContext<ExprContext>(i);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode EQ() { return GetToken(BasicCParser.EQ, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode NE() { return GetToken(BasicCParser.NE, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode LT() { return GetToken(BasicCParser.LT, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode GT() { return GetToken(BasicCParser.GT, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode LE() { return GetToken(BasicCParser.LE, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode GE() { return GetToken(BasicCParser.GE, 0); }
		public BexprRelopContext(BexprContext context) { CopyFrom(context); }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IBasicCListener typedListener = listener as IBasicCListener;
			if (typedListener != null) typedListener.EnterBexprRelop(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IBasicCListener typedListener = listener as IBasicCListener;
			if (typedListener != null) typedListener.ExitBexprRelop(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IBasicCVisitor<TResult> typedVisitor = visitor as IBasicCVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitBexprRelop(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public BexprContext bexpr() {
		BexprContext _localctx = new BexprContext(Context, State);
		EnterRule(_localctx, 26, RULE_bexpr);
		int _la;
		try {
			State = 201;
			ErrorHandler.Sync(this);
			switch ( Interpreter.AdaptivePredict(TokenStream,10,Context) ) {
			case 1:
				_localctx = new BexprRelopContext(_localctx);
				EnterOuterAlt(_localctx, 1);
				{
				State = 196;
				expr();
				State = 197;
				((BexprRelopContext)_localctx).RELOP = TokenStream.LT(1);
				_la = TokenStream.LA(1);
				if ( !((((_la) & ~0x3f) == 0 && ((1L << _la) & 2113929216L) != 0)) ) {
					((BexprRelopContext)_localctx).RELOP = ErrorHandler.RecoverInline(this);
				}
				else {
					ErrorHandler.ReportMatch(this);
				    Consume();
				}
				State = 198;
				expr();
				}
				break;
			case 2:
				_localctx = new BexprExprContext(_localctx);
				EnterOuterAlt(_localctx, 2);
				{
				State = 200;
				expr();
				}
				break;
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class FunctionContext : ParserRuleContext {
		public FunctionContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_function; } }
	 
		public FunctionContext() { }
		public virtual void CopyFrom(FunctionContext context) {
			base.CopyFrom(context);
		}
	}
	public partial class FnWithReturnContext : FunctionContext {
		public IToken TYPE;
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode VAR() { return GetToken(BasicCParser.VAR, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode LP() { return GetToken(BasicCParser.LP, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ParamsContext @params() {
			return GetRuleContext<ParamsContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode RP() { return GetToken(BasicCParser.RP, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public RblockContext rblock() {
			return GetRuleContext<RblockContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode INTEGER() { return GetToken(BasicCParser.INTEGER, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode DOUBLE() { return GetToken(BasicCParser.DOUBLE, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode BOOLEAN() { return GetToken(BasicCParser.BOOLEAN, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode STRING() { return GetToken(BasicCParser.STRING, 0); }
		public FnWithReturnContext(FunctionContext context) { CopyFrom(context); }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IBasicCListener typedListener = listener as IBasicCListener;
			if (typedListener != null) typedListener.EnterFnWithReturn(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IBasicCListener typedListener = listener as IBasicCListener;
			if (typedListener != null) typedListener.ExitFnWithReturn(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IBasicCVisitor<TResult> typedVisitor = visitor as IBasicCVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitFnWithReturn(this);
			else return visitor.VisitChildren(this);
		}
	}
	public partial class FnWithoutReturnContext : FunctionContext {
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode VOID() { return GetToken(BasicCParser.VOID, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode VAR() { return GetToken(BasicCParser.VAR, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode LP() { return GetToken(BasicCParser.LP, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ParamsContext @params() {
			return GetRuleContext<ParamsContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode RP() { return GetToken(BasicCParser.RP, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public RblockContext rblock() {
			return GetRuleContext<RblockContext>(0);
		}
		public FnWithoutReturnContext(FunctionContext context) { CopyFrom(context); }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IBasicCListener typedListener = listener as IBasicCListener;
			if (typedListener != null) typedListener.EnterFnWithoutReturn(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IBasicCListener typedListener = listener as IBasicCListener;
			if (typedListener != null) typedListener.ExitFnWithoutReturn(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IBasicCVisitor<TResult> typedVisitor = visitor as IBasicCVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitFnWithoutReturn(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public FunctionContext function() {
		FunctionContext _localctx = new FunctionContext(Context, State);
		EnterRule(_localctx, 28, RULE_function);
		int _la;
		try {
			State = 217;
			ErrorHandler.Sync(this);
			switch (TokenStream.LA(1)) {
			case INTEGER:
			case DOUBLE:
			case BOOLEAN:
			case STRING:
				_localctx = new FnWithReturnContext(_localctx);
				EnterOuterAlt(_localctx, 1);
				{
				State = 203;
				((FnWithReturnContext)_localctx).TYPE = TokenStream.LT(1);
				_la = TokenStream.LA(1);
				if ( !((((_la) & ~0x3f) == 0 && ((1L << _la) & 7680L) != 0)) ) {
					((FnWithReturnContext)_localctx).TYPE = ErrorHandler.RecoverInline(this);
				}
				else {
					ErrorHandler.ReportMatch(this);
				    Consume();
				}
				State = 204;
				Match(VAR);
				State = 205;
				Match(LP);
				State = 206;
				@params();
				State = 207;
				Match(RP);
				State = 208;
				rblock();
				}
				break;
			case VOID:
				_localctx = new FnWithoutReturnContext(_localctx);
				EnterOuterAlt(_localctx, 2);
				{
				State = 210;
				Match(VOID);
				State = 211;
				Match(VAR);
				State = 212;
				Match(LP);
				State = 213;
				@params();
				State = 214;
				Match(RP);
				State = 215;
				rblock();
				}
				break;
			default:
				throw new NoViableAltException(this);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class ParamsContext : ParserRuleContext {
		public ParamsContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_params; } }
	 
		public ParamsContext() { }
		public virtual void CopyFrom(ParamsContext context) {
			base.CopyFrom(context);
		}
	}
	public partial class MultipleParamsContext : ParamsContext {
		public IToken TYPE;
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode VAR() { return GetToken(BasicCParser.VAR, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode SEP() { return GetToken(BasicCParser.SEP, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ParamsContext @params() {
			return GetRuleContext<ParamsContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode INTEGER() { return GetToken(BasicCParser.INTEGER, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode DOUBLE() { return GetToken(BasicCParser.DOUBLE, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode BOOLEAN() { return GetToken(BasicCParser.BOOLEAN, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode STRING() { return GetToken(BasicCParser.STRING, 0); }
		public MultipleParamsContext(ParamsContext context) { CopyFrom(context); }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IBasicCListener typedListener = listener as IBasicCListener;
			if (typedListener != null) typedListener.EnterMultipleParams(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IBasicCListener typedListener = listener as IBasicCListener;
			if (typedListener != null) typedListener.ExitMultipleParams(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IBasicCVisitor<TResult> typedVisitor = visitor as IBasicCVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitMultipleParams(this);
			else return visitor.VisitChildren(this);
		}
	}
	public partial class NoneParamContext : ParamsContext {
		public NoneParamContext(ParamsContext context) { CopyFrom(context); }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IBasicCListener typedListener = listener as IBasicCListener;
			if (typedListener != null) typedListener.EnterNoneParam(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IBasicCListener typedListener = listener as IBasicCListener;
			if (typedListener != null) typedListener.ExitNoneParam(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IBasicCVisitor<TResult> typedVisitor = visitor as IBasicCVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitNoneParam(this);
			else return visitor.VisitChildren(this);
		}
	}
	public partial class UniqueParamContext : ParamsContext {
		public IToken TYPE;
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode VAR() { return GetToken(BasicCParser.VAR, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode INTEGER() { return GetToken(BasicCParser.INTEGER, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode DOUBLE() { return GetToken(BasicCParser.DOUBLE, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode BOOLEAN() { return GetToken(BasicCParser.BOOLEAN, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode STRING() { return GetToken(BasicCParser.STRING, 0); }
		public UniqueParamContext(ParamsContext context) { CopyFrom(context); }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IBasicCListener typedListener = listener as IBasicCListener;
			if (typedListener != null) typedListener.EnterUniqueParam(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IBasicCListener typedListener = listener as IBasicCListener;
			if (typedListener != null) typedListener.ExitUniqueParam(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IBasicCVisitor<TResult> typedVisitor = visitor as IBasicCVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitUniqueParam(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public ParamsContext @params() {
		ParamsContext _localctx = new ParamsContext(Context, State);
		EnterRule(_localctx, 30, RULE_params);
		int _la;
		try {
			State = 226;
			ErrorHandler.Sync(this);
			switch ( Interpreter.AdaptivePredict(TokenStream,12,Context) ) {
			case 1:
				_localctx = new UniqueParamContext(_localctx);
				EnterOuterAlt(_localctx, 1);
				{
				State = 219;
				((UniqueParamContext)_localctx).TYPE = TokenStream.LT(1);
				_la = TokenStream.LA(1);
				if ( !((((_la) & ~0x3f) == 0 && ((1L << _la) & 7680L) != 0)) ) {
					((UniqueParamContext)_localctx).TYPE = ErrorHandler.RecoverInline(this);
				}
				else {
					ErrorHandler.ReportMatch(this);
				    Consume();
				}
				State = 220;
				Match(VAR);
				}
				break;
			case 2:
				_localctx = new MultipleParamsContext(_localctx);
				EnterOuterAlt(_localctx, 2);
				{
				State = 221;
				((MultipleParamsContext)_localctx).TYPE = TokenStream.LT(1);
				_la = TokenStream.LA(1);
				if ( !((((_la) & ~0x3f) == 0 && ((1L << _la) & 7680L) != 0)) ) {
					((MultipleParamsContext)_localctx).TYPE = ErrorHandler.RecoverInline(this);
				}
				else {
					ErrorHandler.ReportMatch(this);
				    Consume();
				}
				State = 222;
				Match(VAR);
				State = 223;
				Match(SEP);
				State = 224;
				@params();
				}
				break;
			case 3:
				_localctx = new NoneParamContext(_localctx);
				EnterOuterAlt(_localctx, 3);
				{
				}
				break;
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class ParamsCallContext : ParserRuleContext {
		public ParamsCallContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_paramsCall; } }
	 
		public ParamsCallContext() { }
		public virtual void CopyFrom(ParamsCallContext context) {
			base.CopyFrom(context);
		}
	}
	public partial class NoneParamCallContext : ParamsCallContext {
		public NoneParamCallContext(ParamsCallContext context) { CopyFrom(context); }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IBasicCListener typedListener = listener as IBasicCListener;
			if (typedListener != null) typedListener.EnterNoneParamCall(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IBasicCListener typedListener = listener as IBasicCListener;
			if (typedListener != null) typedListener.ExitNoneParamCall(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IBasicCVisitor<TResult> typedVisitor = visitor as IBasicCVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitNoneParamCall(this);
			else return visitor.VisitChildren(this);
		}
	}
	public partial class MultipleParamCallContext : ParamsCallContext {
		[System.Diagnostics.DebuggerNonUserCode] public FactorContext factor() {
			return GetRuleContext<FactorContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode SEP() { return GetToken(BasicCParser.SEP, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ParamsCallContext paramsCall() {
			return GetRuleContext<ParamsCallContext>(0);
		}
		public MultipleParamCallContext(ParamsCallContext context) { CopyFrom(context); }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IBasicCListener typedListener = listener as IBasicCListener;
			if (typedListener != null) typedListener.EnterMultipleParamCall(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IBasicCListener typedListener = listener as IBasicCListener;
			if (typedListener != null) typedListener.ExitMultipleParamCall(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IBasicCVisitor<TResult> typedVisitor = visitor as IBasicCVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitMultipleParamCall(this);
			else return visitor.VisitChildren(this);
		}
	}
	public partial class UniqueParamCallContext : ParamsCallContext {
		[System.Diagnostics.DebuggerNonUserCode] public FactorContext factor() {
			return GetRuleContext<FactorContext>(0);
		}
		public UniqueParamCallContext(ParamsCallContext context) { CopyFrom(context); }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IBasicCListener typedListener = listener as IBasicCListener;
			if (typedListener != null) typedListener.EnterUniqueParamCall(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IBasicCListener typedListener = listener as IBasicCListener;
			if (typedListener != null) typedListener.ExitUniqueParamCall(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IBasicCVisitor<TResult> typedVisitor = visitor as IBasicCVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitUniqueParamCall(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public ParamsCallContext paramsCall() {
		ParamsCallContext _localctx = new ParamsCallContext(Context, State);
		EnterRule(_localctx, 32, RULE_paramsCall);
		try {
			State = 234;
			ErrorHandler.Sync(this);
			switch ( Interpreter.AdaptivePredict(TokenStream,13,Context) ) {
			case 1:
				_localctx = new UniqueParamCallContext(_localctx);
				EnterOuterAlt(_localctx, 1);
				{
				State = 228;
				factor();
				}
				break;
			case 2:
				_localctx = new MultipleParamCallContext(_localctx);
				EnterOuterAlt(_localctx, 2);
				{
				State = 229;
				factor();
				State = 230;
				Match(SEP);
				State = 231;
				paramsCall();
				}
				break;
			case 3:
				_localctx = new NoneParamCallContext(_localctx);
				EnterOuterAlt(_localctx, 3);
				{
				}
				break;
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class CallFunctionContext : ParserRuleContext {
		public CallFunctionContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_callFunction; } }
	 
		public CallFunctionContext() { }
		public virtual void CopyFrom(CallFunctionContext context) {
			base.CopyFrom(context);
		}
	}
	public partial class FuncInvocContext : CallFunctionContext {
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode VAR() { return GetToken(BasicCParser.VAR, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode LP() { return GetToken(BasicCParser.LP, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ParamsCallContext paramsCall() {
			return GetRuleContext<ParamsCallContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode RP() { return GetToken(BasicCParser.RP, 0); }
		public FuncInvocContext(CallFunctionContext context) { CopyFrom(context); }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IBasicCListener typedListener = listener as IBasicCListener;
			if (typedListener != null) typedListener.EnterFuncInvoc(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IBasicCListener typedListener = listener as IBasicCListener;
			if (typedListener != null) typedListener.ExitFuncInvoc(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IBasicCVisitor<TResult> typedVisitor = visitor as IBasicCVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitFuncInvoc(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public CallFunctionContext callFunction() {
		CallFunctionContext _localctx = new CallFunctionContext(Context, State);
		EnterRule(_localctx, 34, RULE_callFunction);
		try {
			_localctx = new FuncInvocContext(_localctx);
			EnterOuterAlt(_localctx, 1);
			{
			State = 236;
			Match(VAR);
			State = 237;
			Match(LP);
			State = 238;
			paramsCall();
			State = 239;
			Match(RP);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class LibContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode IMPORT() { return GetToken(BasicCParser.IMPORT, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode VAR() { return GetToken(BasicCParser.VAR, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode EOL() { return GetToken(BasicCParser.EOL, 0); }
		public LibContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_lib; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IBasicCListener typedListener = listener as IBasicCListener;
			if (typedListener != null) typedListener.EnterLib(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IBasicCListener typedListener = listener as IBasicCListener;
			if (typedListener != null) typedListener.ExitLib(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IBasicCVisitor<TResult> typedVisitor = visitor as IBasicCVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitLib(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public LibContext lib() {
		LibContext _localctx = new LibContext(Context, State);
		EnterRule(_localctx, 36, RULE_lib);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 241;
			Match(IMPORT);
			State = 242;
			Match(VAR);
			State = 243;
			Match(EOL);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class TypecastContext : ParserRuleContext {
		public TypecastContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_typecast; } }
	 
		public TypecastContext() { }
		public virtual void CopyFrom(TypecastContext context) {
			base.CopyFrom(context);
		}
	}
	public partial class TypeCastContext : TypecastContext {
		public IToken TYPE;
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode LP() { return GetToken(BasicCParser.LP, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode RP() { return GetToken(BasicCParser.RP, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode VAR() { return GetToken(BasicCParser.VAR, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode INTEGER() { return GetToken(BasicCParser.INTEGER, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode BOOLEAN() { return GetToken(BasicCParser.BOOLEAN, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode STRING() { return GetToken(BasicCParser.STRING, 0); }
		public TypeCastContext(TypecastContext context) { CopyFrom(context); }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IBasicCListener typedListener = listener as IBasicCListener;
			if (typedListener != null) typedListener.EnterTypeCast(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IBasicCListener typedListener = listener as IBasicCListener;
			if (typedListener != null) typedListener.ExitTypeCast(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IBasicCVisitor<TResult> typedVisitor = visitor as IBasicCVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitTypeCast(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public TypecastContext typecast() {
		TypecastContext _localctx = new TypecastContext(Context, State);
		EnterRule(_localctx, 38, RULE_typecast);
		int _la;
		try {
			_localctx = new TypeCastContext(_localctx);
			EnterOuterAlt(_localctx, 1);
			{
			State = 245;
			Match(LP);
			State = 246;
			((TypeCastContext)_localctx).TYPE = TokenStream.LT(1);
			_la = TokenStream.LA(1);
			if ( !((((_la) & ~0x3f) == 0 && ((1L << _la) & 6656L) != 0)) ) {
				((TypeCastContext)_localctx).TYPE = ErrorHandler.RecoverInline(this);
			}
			else {
				ErrorHandler.ReportMatch(this);
			    Consume();
			}
			State = 247;
			Match(RP);
			State = 248;
			Match(VAR);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	private static int[] _serializedATN = {
		4,1,37,251,2,0,7,0,2,1,7,1,2,2,7,2,2,3,7,3,2,4,7,4,2,5,7,5,2,6,7,6,2,7,
		7,7,2,8,7,8,2,9,7,9,2,10,7,10,2,11,7,11,2,12,7,12,2,13,7,13,2,14,7,14,
		2,15,7,15,2,16,7,16,2,17,7,17,2,18,7,18,2,19,7,19,1,0,4,0,42,8,0,11,0,
		12,0,43,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,
		1,1,1,1,1,1,1,3,1,65,8,1,1,2,1,2,1,2,1,2,1,2,1,2,1,2,1,2,1,2,1,2,1,2,1,
		2,1,2,1,2,1,2,1,2,1,2,1,2,1,2,1,2,1,2,3,2,88,8,2,1,3,1,3,1,3,1,3,1,3,1,
		4,1,4,1,4,1,4,1,4,1,4,1,4,1,4,1,4,1,4,1,4,1,4,1,4,3,4,108,8,4,1,5,1,5,
		1,5,1,5,1,5,1,5,1,5,1,5,1,5,3,5,119,8,5,1,6,1,6,1,6,1,6,1,6,1,6,1,6,1,
		6,1,6,1,6,1,6,1,6,1,6,3,6,134,8,6,1,7,1,7,1,7,1,7,1,7,1,7,1,7,3,7,143,
		8,7,1,8,1,8,1,8,1,8,1,8,1,8,1,8,1,8,1,8,1,8,1,8,1,8,1,8,1,8,3,8,159,8,
		8,1,9,1,9,1,9,1,9,1,9,1,9,1,10,1,10,4,10,169,8,10,11,10,12,10,170,1,10,
		1,10,1,11,1,11,1,11,1,11,1,12,1,12,1,12,1,12,1,12,1,12,1,12,1,12,1,12,
		1,12,1,12,1,12,1,12,1,12,1,12,1,12,3,12,195,8,12,1,13,1,13,1,13,1,13,1,
		13,3,13,202,8,13,1,14,1,14,1,14,1,14,1,14,1,14,1,14,1,14,1,14,1,14,1,14,
		1,14,1,14,1,14,3,14,218,8,14,1,15,1,15,1,15,1,15,1,15,1,15,1,15,3,15,227,
		8,15,1,16,1,16,1,16,1,16,1,16,1,16,3,16,235,8,16,1,17,1,17,1,17,1,17,1,
		17,1,18,1,18,1,18,1,18,1,19,1,19,1,19,1,19,1,19,1,19,0,0,20,0,2,4,6,8,
		10,12,14,16,18,20,22,24,26,28,30,32,34,36,38,0,4,1,0,9,10,1,0,25,30,1,
		0,9,12,2,0,9,9,11,12,267,0,41,1,0,0,0,2,64,1,0,0,0,4,87,1,0,0,0,6,89,1,
		0,0,0,8,107,1,0,0,0,10,118,1,0,0,0,12,133,1,0,0,0,14,142,1,0,0,0,16,158,
		1,0,0,0,18,160,1,0,0,0,20,166,1,0,0,0,22,174,1,0,0,0,24,194,1,0,0,0,26,
		201,1,0,0,0,28,217,1,0,0,0,30,226,1,0,0,0,32,234,1,0,0,0,34,236,1,0,0,
		0,36,241,1,0,0,0,38,245,1,0,0,0,40,42,3,2,1,0,41,40,1,0,0,0,42,43,1,0,
		0,0,43,41,1,0,0,0,43,44,1,0,0,0,44,1,1,0,0,0,45,46,3,4,2,0,46,47,5,6,0,
		0,47,65,1,0,0,0,48,49,3,6,3,0,49,50,5,6,0,0,50,65,1,0,0,0,51,52,3,8,4,
		0,52,53,5,6,0,0,53,65,1,0,0,0,54,65,3,16,8,0,55,65,3,18,9,0,56,65,3,28,
		14,0,57,58,3,34,17,0,58,59,5,6,0,0,59,65,1,0,0,0,60,65,3,36,18,0,61,62,
		3,38,19,0,62,63,5,6,0,0,63,65,1,0,0,0,64,45,1,0,0,0,64,48,1,0,0,0,64,51,
		1,0,0,0,64,54,1,0,0,0,64,55,1,0,0,0,64,56,1,0,0,0,64,57,1,0,0,0,64,60,
		1,0,0,0,64,61,1,0,0,0,65,3,1,0,0,0,66,67,5,34,0,0,67,68,5,19,0,0,68,88,
		5,35,0,0,69,70,5,12,0,0,70,71,5,34,0,0,71,72,5,19,0,0,72,88,5,35,0,0,73,
		74,7,0,0,0,74,75,5,34,0,0,75,76,5,19,0,0,76,88,3,10,5,0,77,78,5,11,0,0,
		78,79,5,34,0,0,79,80,5,19,0,0,80,88,5,32,0,0,81,82,5,34,0,0,82,83,5,19,
		0,0,83,88,3,10,5,0,84,85,5,34,0,0,85,86,5,19,0,0,86,88,5,32,0,0,87,66,
		1,0,0,0,87,69,1,0,0,0,87,73,1,0,0,0,87,77,1,0,0,0,87,81,1,0,0,0,87,84,
		1,0,0,0,88,5,1,0,0,0,89,90,5,8,0,0,90,91,5,21,0,0,91,92,5,34,0,0,92,93,
		5,22,0,0,93,7,1,0,0,0,94,95,5,7,0,0,95,96,5,21,0,0,96,97,5,35,0,0,97,108,
		5,22,0,0,98,99,5,7,0,0,99,100,5,21,0,0,100,101,5,34,0,0,101,108,5,22,0,
		0,102,103,5,7,0,0,103,104,5,21,0,0,104,105,3,10,5,0,105,106,5,22,0,0,106,
		108,1,0,0,0,107,94,1,0,0,0,107,98,1,0,0,0,107,102,1,0,0,0,108,9,1,0,0,
		0,109,110,3,12,6,0,110,111,5,14,0,0,111,112,3,10,5,0,112,119,1,0,0,0,113,
		114,3,12,6,0,114,115,5,15,0,0,115,116,3,10,5,0,116,119,1,0,0,0,117,119,
		3,12,6,0,118,109,1,0,0,0,118,113,1,0,0,0,118,117,1,0,0,0,119,11,1,0,0,
		0,120,121,3,14,7,0,121,122,5,17,0,0,122,123,3,12,6,0,123,134,1,0,0,0,124,
		125,3,14,7,0,125,126,5,16,0,0,126,127,3,12,6,0,127,134,1,0,0,0,128,129,
		3,14,7,0,129,130,5,18,0,0,130,131,3,12,6,0,131,134,1,0,0,0,132,134,3,14,
		7,0,133,120,1,0,0,0,133,124,1,0,0,0,133,128,1,0,0,0,133,132,1,0,0,0,134,
		13,1,0,0,0,135,136,5,21,0,0,136,137,3,10,5,0,137,138,5,22,0,0,138,143,
		1,0,0,0,139,143,5,34,0,0,140,143,5,33,0,0,141,143,5,35,0,0,142,135,1,0,
		0,0,142,139,1,0,0,0,142,140,1,0,0,0,142,141,1,0,0,0,143,15,1,0,0,0,144,
		145,5,4,0,0,145,146,5,21,0,0,146,147,3,26,13,0,147,148,5,22,0,0,148,149,
		3,20,10,0,149,159,1,0,0,0,150,151,5,4,0,0,151,152,5,21,0,0,152,153,3,26,
		13,0,153,154,5,22,0,0,154,155,3,20,10,0,155,156,5,5,0,0,156,157,3,20,10,
		0,157,159,1,0,0,0,158,144,1,0,0,0,158,150,1,0,0,0,159,17,1,0,0,0,160,161,
		5,1,0,0,161,162,5,21,0,0,162,163,3,26,13,0,163,164,5,22,0,0,164,165,3,
		20,10,0,165,19,1,0,0,0,166,168,5,23,0,0,167,169,3,2,1,0,168,167,1,0,0,
		0,169,170,1,0,0,0,170,168,1,0,0,0,170,171,1,0,0,0,171,172,1,0,0,0,172,
		173,5,24,0,0,173,21,1,0,0,0,174,175,5,23,0,0,175,176,3,24,12,0,176,177,
		5,24,0,0,177,23,1,0,0,0,178,195,3,2,1,0,179,180,3,2,1,0,180,181,3,24,12,
		0,181,195,1,0,0,0,182,183,5,2,0,0,183,184,5,32,0,0,184,195,5,6,0,0,185,
		186,5,2,0,0,186,187,5,35,0,0,187,195,5,6,0,0,188,189,5,2,0,0,189,190,3,
		10,5,0,190,191,5,6,0,0,191,195,1,0,0,0,192,193,5,2,0,0,193,195,5,6,0,0,
		194,178,1,0,0,0,194,179,1,0,0,0,194,182,1,0,0,0,194,185,1,0,0,0,194,188,
		1,0,0,0,194,192,1,0,0,0,195,25,1,0,0,0,196,197,3,10,5,0,197,198,7,1,0,
		0,198,199,3,10,5,0,199,202,1,0,0,0,200,202,3,10,5,0,201,196,1,0,0,0,201,
		200,1,0,0,0,202,27,1,0,0,0,203,204,7,2,0,0,204,205,5,34,0,0,205,206,5,
		21,0,0,206,207,3,30,15,0,207,208,5,22,0,0,208,209,3,22,11,0,209,218,1,
		0,0,0,210,211,5,13,0,0,211,212,5,34,0,0,212,213,5,21,0,0,213,214,3,30,
		15,0,214,215,5,22,0,0,215,216,3,22,11,0,216,218,1,0,0,0,217,203,1,0,0,
		0,217,210,1,0,0,0,218,29,1,0,0,0,219,220,7,2,0,0,220,227,5,34,0,0,221,
		222,7,2,0,0,222,223,5,34,0,0,223,224,5,20,0,0,224,227,3,30,15,0,225,227,
		1,0,0,0,226,219,1,0,0,0,226,221,1,0,0,0,226,225,1,0,0,0,227,31,1,0,0,0,
		228,235,3,14,7,0,229,230,3,14,7,0,230,231,5,20,0,0,231,232,3,32,16,0,232,
		235,1,0,0,0,233,235,1,0,0,0,234,228,1,0,0,0,234,229,1,0,0,0,234,233,1,
		0,0,0,235,33,1,0,0,0,236,237,5,34,0,0,237,238,5,21,0,0,238,239,3,32,16,
		0,239,240,5,22,0,0,240,35,1,0,0,0,241,242,5,3,0,0,242,243,5,34,0,0,243,
		244,5,6,0,0,244,37,1,0,0,0,245,246,5,21,0,0,246,247,7,3,0,0,247,248,5,
		22,0,0,248,249,5,34,0,0,249,39,1,0,0,0,14,43,64,87,107,118,133,142,158,
		170,194,201,217,226,234
	};

	public static readonly ATN _ATN =
		new ATNDeserializer().Deserialize(_serializedATN);


}
} // namespace BasicInt.Grammar
